

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 28 22:40:59 2024

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.41
    47                           ; Generated 25/01/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F877A Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  000E                     	;# 
   216  000F                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0014                     	;# 
   222  0015                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  001D                     	;# 
   233  001E                     	;# 
   234  001F                     	;# 
   235  0081                     	;# 
   236  0085                     	;# 
   237  0086                     	;# 
   238  0087                     	;# 
   239  0088                     	;# 
   240  0089                     	;# 
   241  008C                     	;# 
   242  008D                     	;# 
   243  008E                     	;# 
   244  0091                     	;# 
   245  0092                     	;# 
   246  0093                     	;# 
   247  0094                     	;# 
   248  0098                     	;# 
   249  0099                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  010F                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0008                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  000E                     	;# 
   276  000F                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001D                     	;# 
   293  001E                     	;# 
   294  001F                     	;# 
   295  0081                     	;# 
   296  0085                     	;# 
   297  0086                     	;# 
   298  0087                     	;# 
   299  0088                     	;# 
   300  0089                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0093                     	;# 
   307  0094                     	;# 
   308  0098                     	;# 
   309  0099                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  009F                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  010F                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000E                     	;# 
   336  000F                     	;# 
   337  0010                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0014                     	;# 
   342  0015                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  001D                     	;# 
   353  001E                     	;# 
   354  001F                     	;# 
   355  0081                     	;# 
   356  0085                     	;# 
   357  0086                     	;# 
   358  0087                     	;# 
   359  0088                     	;# 
   360  0089                     	;# 
   361  008C                     	;# 
   362  008D                     	;# 
   363  008E                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0094                     	;# 
   368  0098                     	;# 
   369  0099                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  009F                     	;# 
   374  010C                     	;# 
   375  010D                     	;# 
   376  010E                     	;# 
   377  010F                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380                           
   381                           	psect	idataBANK0
   382  0DF9                     __pidataBANK0:	
   383                           
   384                           ;initializer for _IBI
   385  0DF9  3458               	retlw	88
   386  0DFA  3402               	retlw	2
   387                           
   388                           ;initializer for _thresh
   389  0DFB  3412               	retlw	18
   390  0DFC  3402               	retlw	2
   391                           
   392                           ;initializer for _T
   393  0DFD  3400               	retlw	0
   394  0DFE  3402               	retlw	2
   395                           
   396                           ;initializer for _firstBeat
   397  0DFF  3401               	retlw	1
   398                           
   399                           	psect	idataBANK1
   400  0DEE                     __pidataBANK1:	
   401                           
   402                           ;initializer for _main_state
   403  0DEE  34FF               	retlw	255
   404  0DEF  34FF               	retlw	255
   405                           
   406                           ;initializer for _P
   407  0DF0  3400               	retlw	0
   408  0DF1  3402               	retlw	2
   409                           
   410                           	psect	strings
   411  0800                     __pstrings:	
   412  0800                     stringtab:	
   413  0800                     __stringtab:	
   414  0800                     stringcode:	
   415                           ;	String table - string pointers are 1 byte each
   416                           
   417  0800                     stringdir:	
   418  0800  3008               	movlw	high stringdir
   419  0801  008A               	movwf	10
   420  0802  0804               	movf	4,w
   421  0803  0A84               	incf	4,f
   422  0804  0782               	addwf	2,f
   423  0805                     __stringbase:	
   424  0805  3400               	retlw	0
   425  0806                     __end_of__stringtab:	
   426  0806                     _tmr0_mask:	
   427  0806  34FF               	retlw	255
   428  0807                     __end_of_tmr0_mask:	
   429  0001                     _TMR0	set	1
   430  001E                     _ADRESH	set	30
   431  001F                     _ADCON0	set	31
   432  0006                     _PORTB	set	6
   433  0006                     _PORTBbits	set	6
   434  0019                     _TXREG	set	25
   435  001A                     _RCREG	set	26
   436  000C                     _PIR1bits	set	12
   437  0018                     _RCSTAbits	set	24
   438  0018                     _RCSTA	set	24
   439  000B                     _INTCONbits	set	11
   440  0007                     _PORTCbits	set	7
   441  00FA                     _GO_DONE	set	250
   442  00FA                     _GO	set	250
   443  0033                     _RB3	set	51
   444  0081                     _OPTION_REGbits	set	129
   445  009E                     _ADRESL	set	158
   446  009F                     _ADCON1	set	159
   447  0099                     _SPBRG	set	153
   448  0098                     _TXSTA	set	152
   449  0087                     _TRISC	set	135
   450  0087                     _TRISCbits	set	135
   451  0086                     _TRISBbits	set	134
   452  0086                     _TRISB	set	134
   453  0807                     STR_1:	
   454  0807  3452               	retlw	82	;'R'
   455  0808  3465               	retlw	101	;'e'
   456  0809  3461               	retlw	97	;'a'
   457  080A  3464               	retlw	100	;'d'
   458  080B  3469               	retlw	105	;'i'
   459  080C  346E               	retlw	110	;'n'
   460  080D  3467               	retlw	103	;'g'
   461  080E  342E               	retlw	46	;'.'
   462  080F  342E               	retlw	46	;'.'
   463  0810  342E               	retlw	46	;'.'
   464  0811  3400               	retlw	0
   465  0812                     STR_6:	
   466  0812  3442               	retlw	66	;'B'
   467  0813  3450               	retlw	80	;'P'
   468  0814  344D               	retlw	77	;'M'
   469  0815  3420               	retlw	32	;' '
   470  0816  344E               	retlw	78	;'N'
   471  0817  346F               	retlw	111	;'o'
   472  0818  3472               	retlw	114	;'r'
   473  0819  346D               	retlw	109	;'m'
   474  081A  3461               	retlw	97	;'a'
   475  081B  346C               	retlw	108	;'l'
   476  081C  3400               	retlw	0
   477  081D                     STR_10:	
   478  081D  3457               	retlw	87	;'W'
   479  081E  346C               	retlw	108	;'l'
   480  081F  3463               	retlw	99	;'c'
   481  0820  3420               	retlw	32	;' '
   482  0821  3444               	retlw	68	;'D'
   483  0822  346F               	retlw	111	;'o'
   484  0823  3463               	retlw	99	;'c'
   485  0824  3474               	retlw	116	;'t'
   486  0825  346F               	retlw	111	;'o'
   487  0826  3472               	retlw	114	;'r'
   488  0827  3400               	retlw	0
   489  0828                     STR_7:	
   490  0828  3441               	retlw	65	;'A'
   491  0829  3476               	retlw	118	;'v'
   492  082A  3467               	retlw	103	;'g'
   493  082B  3420               	retlw	32	;' '
   494  082C  3442               	retlw	66	;'B'
   495  082D  3450               	retlw	80	;'P'
   496  082E  344D               	retlw	77	;'M'
   497  082F  343A               	retlw	58	;':'
   498  0830  3420               	retlw	32	;' '
   499  0831  3400               	retlw	0
   500  0832                     STR_5:	
   501  0832  3442               	retlw	66	;'B'
   502  0833  3450               	retlw	80	;'P'
   503  0834  344D               	retlw	77	;'M'
   504  0835  3420               	retlw	32	;' '
   505  0836  3448               	retlw	72	;'H'
   506  0837  3469               	retlw	105	;'i'
   507  0838  3467               	retlw	103	;'g'
   508  0839  3468               	retlw	104	;'h'
   509  083A  3400               	retlw	0
   510  083B                     STR_4:	
   511  083B  3442               	retlw	66	;'B'
   512  083C  3450               	retlw	80	;'P'
   513  083D  344D               	retlw	77	;'M'
   514  083E  3420               	retlw	32	;' '
   515  083F  344C               	retlw	76	;'L'
   516  0840  346F               	retlw	111	;'o'
   517  0841  3477               	retlw	119	;'w'
   518  0842  3400               	retlw	0
   519  0843                     STR_3:	
   520  0843  3449               	retlw	73	;'I'
   521  0844  3442               	retlw	66	;'B'
   522  0845  3449               	retlw	73	;'I'
   523  0846  343A               	retlw	58	;':'
   524  0847  3420               	retlw	32	;' '
   525  0848  3400               	retlw	0
   526  0843                     
   527                           ; #config settings
   528  0000                     
   529                           	psect	cinit
   530  0015                     start_initialization:	
   531  0015                     __initialization:	
   532                           
   533                           ; Initialize objects allocated to BANK1
   534  0015  1383               	bcf	3,7	;select IRP bank0
   535  0016  30EC               	movlw	low (__pdataBANK1+4)
   536  0017  00FD               	movwf	btemp+-1
   537  0018  300D               	movlw	high __pidataBANK1
   538  0019  00FE               	movwf	btemp
   539  001A  30EE               	movlw	low __pidataBANK1
   540  001B  00FF               	movwf	btemp+1
   541  001C  30E8               	movlw	low __pdataBANK1
   542  001D  0084               	movwf	4
   543  001E  120A  158A  261E  120A  118A  	fcall	init_ram0
   544                           
   545                           ; Initialize objects allocated to BANK0
   546  0023  3070               	movlw	low (__pdataBANK0+7)
   547  0024  00FD               	movwf	btemp+-1
   548  0025  300D               	movlw	high __pidataBANK0
   549  0026  00FE               	movwf	btemp
   550  0027  30F9               	movlw	low __pidataBANK0
   551  0028  00FF               	movwf	btemp+1
   552  0029  3069               	movlw	low __pdataBANK0
   553  002A  0084               	movwf	4
   554  002B  120A  158A  261E  120A  118A  	fcall	init_ram0
   555                           
   556                           ; Clear objects allocated to BANK1
   557  0030  30A0               	movlw	low __pbssBANK1
   558  0031  0084               	movwf	4
   559  0032  30E8               	movlw	low (__pbssBANK1+72)
   560  0033  120A  158A  2608  120A  118A  	fcall	clear_ram0
   561                           
   562                           ; Clear objects allocated to BANK0
   563  0038  3060               	movlw	low __pbssBANK0
   564  0039  0084               	movwf	4
   565  003A  3069               	movlw	low (__pbssBANK0+9)
   566  003B  120A  158A  2608   	fcall	clear_ram0
   567                           
   568                           ; Clear objects allocated to COMMON
   569  003E  01F6               	clrf	__pbssCOMMON& (0+127)
   570  003F  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   571  0040  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   572                           
   573                           ; Clear objects allocated to BITCOMMON
   574  0041  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   575  0042                     end_of_initialization:	
   576                           ;End of C runtime variable initialization code
   577                           
   578  0042                     __end_of__initialization:	
   579  0042  0183               	clrf	3
   580  0043  120A  118A  2ACD   	ljmp	_main	;jump to C main() function
   581                           
   582                           	psect	bitbssCOMMON
   583  03C8                     __pbitbssCOMMON:	
   584  03C8                     _status:	
   585  03C8                     	ds	1
   586                           
   587                           	psect	bssCOMMON
   588  0076                     __pbssCOMMON:	
   589  0076                     _c:	
   590  0076                     	ds	1
   591  0077                     _QS:	
   592  0077                     	ds	1
   593  0078                     _secondBeat:	
   594  0078                     	ds	1
   595                           
   596                           	psect	bssBANK0
   597  0060                     __pbssBANK0:	
   598  0060                     _sampleCounter:	
   599  0060                     	ds	4
   600  0064                     _Signal:	
   601  0064                     	ds	2
   602  0066                     _BPM:	
   603  0066                     	ds	2
   604  0068                     _Pulse:	
   605  0068                     	ds	1
   606                           
   607                           	psect	dataBANK0
   608  0069                     __pdataBANK0:	
   609  0069                     _IBI:	
   610  0069                     	ds	2
   611  006B                     _thresh:	
   612  006B                     	ds	2
   613  006D                     _T:	
   614  006D                     	ds	2
   615  006F                     _firstBeat:	
   616  006F                     	ds	1
   617                           
   618                           	psect	bssBANK1
   619  00A0                     __pbssBANK1:	
   620  00A0                     _num:	
   621  00A0                     	ds	20
   622  00B4                     _rate:	
   623  00B4                     	ds	20
   624  00C8                     main@F1475:	
   625  00C8                     	ds	10
   626  00D2                     main@F1473:	
   627  00D2                     	ds	10
   628  00DC                     _lastBeatTime:	
   629  00DC                     	ds	4
   630  00E0                     TMR0_ISR@CountCallBack:	
   631  00E0                     	ds	2
   632  00E2                     _tune:	
   633  00E2                     	ds	2
   634  00E4                     _adc_value:	
   635  00E4                     	ds	2
   636  00E6                     _amp:	
   637  00E6                     	ds	2
   638                           
   639                           	psect	dataBANK1
   640  00E8                     __pdataBANK1:	
   641  00E8                     _main_state:	
   642  00E8                     	ds	2
   643  00EA                     _P:	
   644  00EA                     	ds	2
   645                           
   646                           	psect	inittext
   647  0E1A                     init_fetch0:	
   648                           ;	Called with low address in FSR and high address in W
   649                           
   650  0E1A  087E               	movf	126,w
   651  0E1B  008A               	movwf	10
   652  0E1C  087F               	movf	127,w
   653  0E1D  0082               	movwf	2
   654  0E1E                     init_ram0:	
   655                           ;Called with:
   656                           ;	high address of idata address in btemp 
   657                           ;	low address of idata address in btemp+1 
   658                           ;	low address of data in FSR
   659                           ;	high address + 1 of data in btemp-1
   660                           
   661  0E1E  261A  120A  158A   	fcall	init_fetch0
   662  0E21  0080               	movwf	0
   663  0E22  0A84               	incf	4,f
   664  0E23  0804               	movf	4,w
   665  0E24  067D               	xorwf	125,w
   666  0E25  1903               	btfsc	3,2
   667  0E26  3400               	retlw	0
   668  0E27  0AFF               	incf	127,f
   669  0E28  1903               	btfsc	3,2
   670  0E29  0AFE               	incf	126,f
   671  0E2A  2E1E               	goto	init_ram0
   672                           
   673                           	psect	clrtext
   674  0E08                     clear_ram0:	
   675                           ;	Called with FSR containing the base address, and
   676                           ;	W with the last address+1
   677                           
   678  0E08  0064               	clrwdt	;clear the watchdog before getting into this loop
   679  0E09                     clrloop0:	
   680  0E09  0180               	clrf	0	;clear RAM location pointed to by FSR
   681  0E0A  0A84               	incf	4,f	;increment pointer
   682  0E0B  0604               	xorwf	4,w	;XOR with final address
   683  0E0C  1903               	btfsc	3,2	;have we reached the end yet?
   684  0E0D  3400               	retlw	0	;all done for this memory range, return
   685  0E0E  0604               	xorwf	4,w	;XOR again to restore value
   686  0E0F  2E09               	goto	clrloop0	;do the next byte
   687                           
   688                           	psect	cstackCOMMON
   689  0070                     __pcstackCOMMON:	
   690  0070                     ?_system_init:	
   691  0070                     ?_lcd_com:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_lcd_puts:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_lcd_init:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_TMR0_Initialize:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_TMR0_StartTimer:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_ADC_Init:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_TMR0_ISR:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ??_TMR0_ISR:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_buzzer_control:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_main:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_timer_isr:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ??_timer_isr:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_INTERRUPT_InterruptManager:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ??_INTERRUPT_InterruptManager:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_lcd_init_write:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_lcd_data:	
   737                           ; 1 bytes @ 0x0
   738                           
   739                           
   740                           ; 1 bytes @ 0x0
   741  0070                     	ds	4
   742  0074                     ??_TMR0_Initialize:	
   743  0074                     ??_TMR0_StartTimer:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0074                     ??_ADC_Init:	
   747                           ; 1 bytes @ 0x4
   748                           
   749  0074                     ??_buzzer_control:	
   750                           ; 1 bytes @ 0x4
   751                           
   752  0074                     ?_rgb_led_control:	
   753                           ; 1 bytes @ 0x4
   754                           
   755  0074                     ?_delay:	
   756                           ; 1 bytes @ 0x4
   757                           
   758  0074                     ?_delay_adc:	
   759                           ; 1 bytes @ 0x4
   760                           
   761  0074                     ??___aldiv:	
   762                           ; 1 bytes @ 0x4
   763                           
   764  0074                     ??___awdiv:	
   765                           ; 1 bytes @ 0x4
   766                           
   767  0074                     ??___lwdiv:	
   768                           ; 1 bytes @ 0x4
   769                           
   770  0074                     ??___lwmod:	
   771                           ; 1 bytes @ 0x4
   772                           
   773  0074                     rgb_led_control@bpm:	
   774                           ; 1 bytes @ 0x4
   775                           
   776  0074                     delay@j:	
   777                           ; 2 bytes @ 0x4
   778                           
   779  0074                     delay_adc@cnt:	
   780                           ; 2 bytes @ 0x4
   781                           
   782                           
   783                           ; 2 bytes @ 0x4
   784  0074                     	ds	1
   785  0075                     ??___wmul:	
   786  0075                     ___lwmod@counter:	
   787                           ; 1 bytes @ 0x5
   788                           
   789                           
   790                           ; 1 bytes @ 0x5
   791  0075                     	ds	1
   792  0076                     ??_ADC_Read:	
   793  0076                     ??_lcd_puts:	
   794                           ; 1 bytes @ 0x6
   795                           
   796  0076                     ??_lcd_init:	
   797                           ; 1 bytes @ 0x6
   798                           
   799  0076                     ??_rgb_led_control:	
   800                           ; 1 bytes @ 0x6
   801                           
   802  0076                     ??_delay:	
   803                           ; 1 bytes @ 0x6
   804                           
   805  0076                     ??_lcd_init_write:	
   806                           ; 1 bytes @ 0x6
   807                           
   808  0076                     ??_lcd_data:	
   809                           ; 1 bytes @ 0x6
   810                           
   811  0076                     ??_delay_adc:	
   812                           ; 1 bytes @ 0x6
   813                           
   814                           
   815                           	psect	cstackBANK0
   816  0020                     __pcstackBANK0:	
   817                           ; 1 bytes @ 0x6
   818                           
   819  0020                     ?_ADC_Read:	
   820  0020                     ?___awdiv:	
   821                           ; 2 bytes @ 0x0
   822                           
   823  0020                     ?___lwdiv:	
   824                           ; 2 bytes @ 0x0
   825                           
   826  0020                     ?___lwmod:	
   827                           ; 2 bytes @ 0x0
   828                           
   829  0020                     ?___aldiv:	
   830                           ; 2 bytes @ 0x0
   831                           
   832  0020                     buzzer_control@is_high:	
   833                           ; 4 bytes @ 0x0
   834                           
   835  0020                     delay@i:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0020                     ADC_Read@adcChannel:	
   839                           ; 2 bytes @ 0x0
   840                           
   841  0020                     ___awdiv@divisor:	
   842                           ; 2 bytes @ 0x0
   843                           
   844  0020                     ___lwdiv@divisor:	
   845                           ; 2 bytes @ 0x0
   846                           
   847  0020                     ___lwmod@divisor:	
   848                           ; 2 bytes @ 0x0
   849                           
   850  0020                     ___aldiv@divisor:	
   851                           ; 2 bytes @ 0x0
   852                           
   853                           
   854                           ; 4 bytes @ 0x0
   855  0020                     	ds	1
   856  0021                     buzzer_control@i:	
   857                           
   858                           ; 2 bytes @ 0x1
   859  0021                     	ds	1
   860  0022                     ??_lcd_com:	
   861  0022                     lcd_init_write@a:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0022                     ___awdiv@dividend:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0022                     ___lwdiv@dividend:	
   868                           ; 2 bytes @ 0x2
   869                           
   870  0022                     ___lwmod@dividend:	
   871                           ; 2 bytes @ 0x2
   872                           
   873                           
   874                           ; 2 bytes @ 0x2
   875  0022                     	ds	1
   876  0023                     buzzer_control@i_192:	
   877                           
   878                           ; 2 bytes @ 0x3
   879  0023                     	ds	1
   880  0024                     lcd_com@a:	
   881  0024                     ___awdiv@counter:	
   882                           ; 1 bytes @ 0x4
   883                           
   884  0024                     ___lwdiv@counter:	
   885                           ; 1 bytes @ 0x4
   886                           
   887  0024                     ___aldiv@dividend:	
   888                           ; 1 bytes @ 0x4
   889                           
   890                           
   891                           ; 4 bytes @ 0x4
   892  0024                     	ds	1
   893  0025                     lcd_com@temp:	
   894  0025                     ___awdiv@sign:	
   895                           ; 1 bytes @ 0x5
   896                           
   897  0025                     ___lwdiv@quotient:	
   898                           ; 1 bytes @ 0x5
   899                           
   900                           
   901                           ; 2 bytes @ 0x5
   902  0025                     	ds	1
   903  0026                     lcd_data@a:	
   904  0026                     ___awdiv@quotient:	
   905                           ; 1 bytes @ 0x6
   906                           
   907                           
   908                           ; 2 bytes @ 0x6
   909  0026                     	ds	1
   910  0027                     ?_lcd_print_number:	
   911  0027                     lcd_puts@i:	
   912                           ; 1 bytes @ 0x7
   913                           
   914  0027                     lcd_print_number@i:	
   915                           ; 2 bytes @ 0x7
   916                           
   917                           
   918                           ; 2 bytes @ 0x7
   919  0027                     	ds	1
   920  0028                     ?___wmul:	
   921  0028                     ___aldiv@counter:	
   922                           ; 2 bytes @ 0x8
   923                           
   924  0028                     ___wmul@multiplier:	
   925                           ; 1 bytes @ 0x8
   926                           
   927                           
   928                           ; 2 bytes @ 0x8
   929  0028                     	ds	1
   930  0029                     ??_lcd_print_number:	
   931  0029                     lcd_puts@str:	
   932                           ; 1 bytes @ 0x9
   933                           
   934  0029                     ___aldiv@sign:	
   935                           ; 1 bytes @ 0x9
   936                           
   937                           
   938                           ; 1 bytes @ 0x9
   939  0029                     	ds	1
   940  002A                     ??_system_init:	
   941  002A                     ___wmul@multiplicand:	
   942                           ; 1 bytes @ 0xA
   943                           
   944  002A                     ___aldiv@quotient:	
   945                           ; 2 bytes @ 0xA
   946                           
   947                           
   948                           ; 4 bytes @ 0xA
   949  002A                     	ds	1
   950  002B                     lcd_print_number@k:	
   951                           
   952                           ; 2 bytes @ 0xB
   953  002B                     	ds	1
   954  002C                     ___wmul@product:	
   955                           
   956                           ; 2 bytes @ 0xC
   957  002C                     	ds	1
   958  002D                     lcd_print_number@p:	
   959                           
   960                           ; 2 bytes @ 0xD
   961  002D                     	ds	1
   962  002E                     ?_calculate_heart_beat:	
   963  002E                     calculate_heart_beat@adc_value:	
   964                           ; 1 bytes @ 0xE
   965                           
   966                           
   967                           ; 2 bytes @ 0xE
   968  002E                     	ds	2
   969  0030                     ??_calculate_heart_beat:	
   970                           
   971                           ; 1 bytes @ 0x10
   972  0030                     	ds	4
   973  0034                     calculate_heart_beat@runningTotal:	
   974                           
   975                           ; 2 bytes @ 0x14
   976  0034                     	ds	2
   977  0036                     calculate_heart_beat@i:	
   978                           
   979                           ; 2 bytes @ 0x16
   980  0036                     	ds	2
   981  0038                     calculate_heart_beat@N:	
   982                           
   983                           ; 2 bytes @ 0x18
   984  0038                     	ds	2
   985  003A                     calculate_heart_beat@i_188:	
   986                           
   987                           ; 2 bytes @ 0x1A
   988  003A                     	ds	2
   989  003C                     ??_main:	
   990                           
   991                           ; 1 bytes @ 0x1C
   992  003C                     	ds	4
   993  0040                     main@avg_ibi:	
   994                           
   995                           ; 2 bytes @ 0x20
   996  0040                     	ds	2
   997  0042                     main@bpm_readings:	
   998                           
   999                           ; 10 bytes @ 0x22
  1000  0042                     	ds	10
  1001  004C                     main@ibi_readings:	
  1002                           
  1003                           ; 10 bytes @ 0x2C
  1004  004C                     	ds	10
  1005  0056                     main@total_bpm:	
  1006                           
  1007                           ; 2 bytes @ 0x36
  1008  0056                     	ds	2
  1009  0058                     main@total_ibi:	
  1010                           
  1011                           ; 2 bytes @ 0x38
  1012  0058                     	ds	2
  1013  005A                     main@reading_count:	
  1014                           
  1015                           ; 2 bytes @ 0x3A
  1016  005A                     	ds	2
  1017  005C                     main@i:	
  1018                           
  1019                           ; 2 bytes @ 0x3C
  1020  005C                     	ds	2
  1021  005E                     main@avg_bpm:	
  1022                           
  1023                           ; 2 bytes @ 0x3E
  1024  005E                     	ds	2
  1025                           
  1026                           	psect	maintext
  1027  02CD                     __pmaintext:	
  1028 ;;
  1029 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1030 ;;
  1031 ;; *************** function _main *****************
  1032 ;; Defined at:
  1033 ;;		line 175 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  i               2   60[BANK0 ] int 
  1038 ;;  avg_bpm         2   62[BANK0 ] int 
  1039 ;;  total_ibi       2   56[BANK0 ] int 
  1040 ;;  total_bpm       2   54[BANK0 ] int 
  1041 ;;  avg_ibi         2   32[BANK0 ] int 
  1042 ;;  ibi_readings   10   44[BANK0 ] int [5]
  1043 ;;  bpm_readings   10   34[BANK0 ] int [5]
  1044 ;;  reading_coun    2   58[BANK0 ] int 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : B00/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1054 ;;      Params:         0       0       0       0       0
  1055 ;;      Locals:         0      32       0       0       0
  1056 ;;      Temps:          0       4       0       0       0
  1057 ;;      Totals:         0      36       0       0       0
  1058 ;;Total ram usage:       36 bytes
  1059 ;; Hardware stack levels required when called:    8
  1060 ;; This function calls:
  1061 ;;		_ADC_Read
  1062 ;;		___awdiv
  1063 ;;		_buzzer_control
  1064 ;;		_calculate_heart_beat
  1065 ;;		_lcd_com
  1066 ;;		_lcd_print_number
  1067 ;;		_lcd_puts
  1068 ;;		_rgb_led_control
  1069 ;;		_system_init
  1070 ;; This function is called by:
  1071 ;;		Startup code after reset
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           
  1076                           ;psect for function _main
  1077  02CD                     _main:	
  1078                           
  1079                           ;main.c: 176: system_init();
  1080                           
  1081                           ;incstack = 0
  1082                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1083  02CD  120A  118A  2662  120A  118A  	fcall	_system_init
  1084                           
  1085                           ;main.c: 177: main_state = 1;
  1086  02D2  3001               	movlw	1
  1087  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  1088  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  1089  02D5  00E8               	movwf	_main_state^(0+128)
  1090  02D6  3000               	movlw	0
  1091  02D7  00E9               	movwf	(_main_state^(0+128)+1)
  1092                           
  1093                           ;main.c: 178: int bpm_readings[5] = {0};
  1094  02D8  3042               	movlw	main@bpm_readings& (0+255)
  1095  02D9  0084               	movwf	4
  1096  02DA  30D2               	movlw	low main@F1473
  1097  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  1098  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  1099  02DD  00BC               	movwf	??_main
  1100  02DE  0804               	movf	4,w
  1101  02DF  00BD               	movwf	??_main+1
  1102  02E0  300A               	movlw	10
  1103  02E1  00BE               	movwf	??_main+2
  1104  02E2                     u2500:	
  1105  02E2  083C               	movf	??_main,w
  1106  02E3  0084               	movwf	4
  1107  02E4  1383               	bcf	3,7	;select IRP bank1
  1108  02E5  0800               	movf	0,w
  1109  02E6  00BF               	movwf	??_main+3
  1110  02E7  0ABC               	incf	??_main,f
  1111  02E8  083D               	movf	??_main+1,w
  1112  02E9  0084               	movwf	4
  1113  02EA  083F               	movf	??_main+3,w
  1114  02EB  0080               	movwf	0
  1115  02EC  0ABD               	incf	??_main+1,f
  1116  02ED  0BBE               	decfsz	??_main+2,f
  1117  02EE  2AE2               	goto	u2500
  1118                           
  1119                           ;main.c: 179: int ibi_readings[5] = {0};
  1120  02EF  304C               	movlw	main@ibi_readings& (0+255)
  1121  02F0  0084               	movwf	4
  1122  02F1  30C8               	movlw	low main@F1475
  1123  02F2  00BC               	movwf	??_main
  1124  02F3  0804               	movf	4,w
  1125  02F4  00BD               	movwf	??_main+1
  1126  02F5  300A               	movlw	10
  1127  02F6  00BE               	movwf	??_main+2
  1128  02F7                     u2510:	
  1129  02F7  083C               	movf	??_main,w
  1130  02F8  0084               	movwf	4
  1131  02F9  1383               	bcf	3,7	;select IRP bank1
  1132  02FA  0800               	movf	0,w
  1133  02FB  00BF               	movwf	??_main+3
  1134  02FC  0ABC               	incf	??_main,f
  1135  02FD  083D               	movf	??_main+1,w
  1136  02FE  0084               	movwf	4
  1137  02FF  083F               	movf	??_main+3,w
  1138  0300  0080               	movwf	0
  1139  0301  0ABD               	incf	??_main+1,f
  1140  0302  0BBE               	decfsz	??_main+2,f
  1141  0303  2AF7               	goto	u2510
  1142                           
  1143                           ;main.c: 180: int reading_count = 0;
  1144  0304  01DA               	clrf	main@reading_count
  1145  0305  01DB               	clrf	main@reading_count+1
  1146                           
  1147                           ;main.c: 182: switch (main_state) {
  1148                           
  1149                           ;main.c: 181: while (1) {
  1150  0306  2D31               	goto	l2562
  1151  0307                     l2450:	
  1152                           ;main.c: 183: case 1:
  1153                           
  1154                           
  1155                           ;main.c: 184: adc_value = ADC_Read(0);
  1156  0307  3000               	movlw	0
  1157  0308  1283               	bcf	3,5	;RP0=0, select bank0
  1158  0309  00A0               	movwf	ADC_Read@adcChannel
  1159  030A  00A1               	movwf	ADC_Read@adcChannel+1
  1160  030B  120A  158A  26E5  120A  118A  	fcall	_ADC_Read
  1161  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1162  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1163  0312  0821               	movf	?_ADC_Read+1,w
  1164  0313  1683               	bsf	3,5	;RP0=1, select bank1
  1165  0314  1303               	bcf	3,6	;RP1=0, select bank1
  1166  0315  00E5               	movwf	(_adc_value+1)^(0+128)
  1167  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1169  0318  0820               	movf	?_ADC_Read,w
  1170  0319  1683               	bsf	3,5	;RP0=1, select bank1
  1171  031A  1303               	bcf	3,6	;RP1=0, select bank1
  1172  031B  00E4               	movwf	_adc_value^(0+128)
  1173                           
  1174                           ;main.c: 185: if (adc_value > 100) {
  1175  031C  0865               	movf	(_adc_value+1)^(0+128),w
  1176  031D  3A80               	xorlw	128
  1177  031E  00FF               	movwf	127
  1178  031F  3080               	movlw	128
  1179  0320  027F               	subwf	127,w
  1180  0321  1D03               	skipz
  1181  0322  2B25               	goto	u2525
  1182  0323  3065               	movlw	101
  1183  0324  0264               	subwf	_adc_value^(0+128),w
  1184  0325                     u2525:	
  1185  0325  1C03               	skipc
  1186  0326  2D31               	goto	l2562
  1187                           
  1188                           ;main.c: 186: main_state = 2;
  1189  0327  3002               	movlw	2
  1190  0328  2B39               	goto	L1
  1191  0329                     l2456:	
  1192                           ;main.c: 190: case 2:
  1193                           
  1194                           ;main.c: 187: }
  1195                           ;main.c: 188: break;
  1196                           
  1197                           
  1198                           ;main.c: 191: calculate_heart_beat(adc_value);
  1199  0329  0865               	movf	(_adc_value+1)^(0+128),w
  1200  032A  1283               	bcf	3,5	;RP0=0, select bank0
  1201  032B  1303               	bcf	3,6	;RP1=0, select bank0
  1202  032C  00AF               	movwf	calculate_heart_beat@adc_value+1
  1203  032D  1683               	bsf	3,5	;RP0=1, select bank1
  1204  032E  1303               	bcf	3,6	;RP1=0, select bank1
  1205  032F  0864               	movf	_adc_value^(0+128),w
  1206  0330  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0332  00AE               	movwf	calculate_heart_beat@adc_value
  1209  0333  120A  118A  2046  120A  118A  	fcall	_calculate_heart_beat
  1210                           
  1211                           ;main.c: 192: main_state = 3;
  1212  0338  3003               	movlw	3
  1213  0339                     L1:	
  1214  0339  1683               	bsf	3,5	;RP0=1, select bank1
  1215  033A  1303               	bcf	3,6	;RP1=0, select bank1
  1216  033B  00E8               	movwf	_main_state^(0+128)
  1217  033C  3000               	movlw	0
  1218  033D  00E9               	movwf	(_main_state^(0+128)+1)
  1219                           
  1220                           ;main.c: 193: break;
  1221  033E  2D31               	goto	l2562
  1222  033F                     l2460:	
  1223                           ;main.c: 195: case 3:
  1224                           
  1225                           
  1226                           ;main.c: 196: if (QS == 1) {
  1227  033F  0377               	decf	_QS,w	;volatile
  1228  0340  1D03               	btfss	3,2
  1229  0341  2D2D               	goto	l2558
  1230                           
  1231                           ;main.c: 197: QS = 0;
  1232  0342  01F7               	clrf	_QS	;volatile
  1233                           
  1234                           ;main.c: 199: lcd_com(0x01);
  1235  0343  3001               	movlw	1
  1236  0344  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1237                           
  1238                           ;main.c: 200: _delay((unsigned long)((2)*(16000000/4000.0)));
  1239  0349  300B               	movlw	11
  1240  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1241  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1242  034C  00BD               	movwf	??_main+1
  1243  034D  3061               	movlw	97
  1244  034E  00BC               	movwf	??_main
  1245  034F                     u2697:	
  1246  034F  0BBC               	decfsz	??_main,f
  1247  0350  2B4F               	goto	u2697
  1248  0351  0BBD               	decfsz	??_main+1,f
  1249  0352  2B4F               	goto	u2697
  1250  0353  2B54               	nop2
  1251                           
  1252                           ;main.c: 201: lcd_com(0x80);
  1253  0354  3080               	movlw	128
  1254  0355  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1255                           
  1256                           ;main.c: 202: lcd_puts("Reading...");
  1257  035A  3002               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1258  035B  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1259                           
  1260                           ;main.c: 203: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1261  0360  3015               	movlw	21
  1262  0361  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0362  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0363  00BE               	movwf	??_main+2
  1265  0364  304B               	movlw	75
  1266  0365  00BD               	movwf	??_main+1
  1267  0366  30BD               	movlw	189
  1268  0367  00BC               	movwf	??_main
  1269  0368                     u2707:	
  1270  0368  0BBC               	decfsz	??_main,f
  1271  0369  2B68               	goto	u2707
  1272  036A  0BBD               	decfsz	??_main+1,f
  1273  036B  2B68               	goto	u2707
  1274  036C  0BBE               	decfsz	??_main+2,f
  1275  036D  2B68               	goto	u2707
  1276  036E  2B6F               	nop2
  1277                           
  1278                           ;main.c: 205: lcd_com(0x01);
  1279  036F  3001               	movlw	1
  1280  0370  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1281                           
  1282                           ;main.c: 206: _delay((unsigned long)((2)*(16000000/4000.0)));
  1283  0375  300B               	movlw	11
  1284  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0378  00BD               	movwf	??_main+1
  1287  0379  3061               	movlw	97
  1288  037A  00BC               	movwf	??_main
  1289  037B                     u2717:	
  1290  037B  0BBC               	decfsz	??_main,f
  1291  037C  2B7B               	goto	u2717
  1292  037D  0BBD               	decfsz	??_main+1,f
  1293  037E  2B7B               	goto	u2717
  1294  037F  2B80               	nop2
  1295                           
  1296                           ;main.c: 207: lcd_com(0x80);
  1297  0380  3080               	movlw	128
  1298  0381  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1299                           
  1300                           ;main.c: 209: bpm_readings[reading_count] = BPM;
  1301  0386  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0387  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0388  085A               	movf	main@reading_count,w
  1304  0389  00BC               	movwf	??_main
  1305  038A  073C               	addwf	??_main,w
  1306  038B  3E42               	addlw	(low (main@bpm_readings| 0))& (0+255)
  1307  038C  0084               	movwf	4
  1308  038D  0866               	movf	_BPM,w	;volatile
  1309  038E  1383               	bcf	3,7	;select IRP bank0
  1310  038F  0080               	movwf	0
  1311  0390  0A84               	incf	4,f
  1312  0391  0867               	movf	_BPM+1,w	;volatile
  1313  0392  0080               	movwf	0
  1314                           
  1315                           ;main.c: 210: ibi_readings[reading_count] = IBI;
  1316  0393  085A               	movf	main@reading_count,w
  1317  0394  00BC               	movwf	??_main
  1318  0395  073C               	addwf	??_main,w
  1319  0396  3E4C               	addlw	(low (main@ibi_readings| 0))& (0+255)
  1320  0397  0084               	movwf	4
  1321  0398  0869               	movf	_IBI,w	;volatile
  1322  0399  0080               	movwf	0
  1323  039A  0A84               	incf	4,f
  1324  039B  086A               	movf	_IBI+1,w	;volatile
  1325  039C  0080               	movwf	0
  1326                           
  1327                           ;main.c: 211: reading_count++;
  1328  039D  3001               	movlw	1
  1329  039E  07DA               	addwf	main@reading_count,f
  1330  039F  1803               	skipnc
  1331  03A0  0ADB               	incf	main@reading_count+1,f
  1332  03A1  3000               	movlw	0
  1333  03A2  07DB               	addwf	main@reading_count+1,f
  1334                           
  1335                           ;main.c: 213: if (reading_count >= 5) {
  1336  03A3  085B               	movf	main@reading_count+1,w
  1337  03A4  3A80               	xorlw	128
  1338  03A5  00FF               	movwf	127
  1339  03A6  3080               	movlw	128
  1340  03A7  027F               	subwf	127,w
  1341  03A8  1D03               	skipz
  1342  03A9  2BAC               	goto	u2545
  1343  03AA  3005               	movlw	5
  1344  03AB  025A               	subwf	main@reading_count,w
  1345  03AC                     u2545:	
  1346  03AC  1C03               	skipc
  1347  03AD  2CD8               	goto	l2542
  1348                           
  1349                           ;main.c: 214: int total_bpm = 0;
  1350  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  1351  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  1352  03B0  01D6               	clrf	main@total_bpm
  1353  03B1  01D7               	clrf	main@total_bpm+1
  1354                           
  1355                           ;main.c: 215: int total_ibi = 0;
  1356  03B2  01D8               	clrf	main@total_ibi
  1357  03B3  01D9               	clrf	main@total_ibi+1
  1358                           
  1359                           ;main.c: 216: for (int i = 0; i < 5; i++) {
  1360  03B4  01DC               	clrf	main@i
  1361  03B5  01DD               	clrf	main@i+1
  1362  03B6  085D               	movf	main@i+1,w
  1363  03B7  3A80               	xorlw	128
  1364  03B8  00FF               	movwf	127
  1365  03B9  3080               	movlw	128
  1366  03BA  027F               	subwf	127,w
  1367  03BB  1D03               	skipz
  1368  03BC  2BBF               	goto	u2555
  1369  03BD  3005               	movlw	5
  1370  03BE  025C               	subwf	main@i,w
  1371  03BF                     u2555:	
  1372  03BF  1803               	btfsc	3,0
  1373  03C0  2BF5               	goto	l2500
  1374  03C1                     l2494:	
  1375                           
  1376                           ;main.c: 217: total_bpm += bpm_readings[i];
  1377  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  1378  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  1379  03C3  085C               	movf	main@i,w
  1380  03C4  00BC               	movwf	??_main
  1381  03C5  073C               	addwf	??_main,w
  1382  03C6  3E42               	addlw	(low (main@bpm_readings| 0))& (0+255)
  1383  03C7  0084               	movwf	4
  1384  03C8  1383               	bcf	3,7	;select IRP bank0
  1385  03C9  0800               	movf	0,w
  1386  03CA  00BD               	movwf	??_main+1
  1387  03CB  0A84               	incf	4,f
  1388  03CC  0800               	movf	0,w
  1389  03CD  00BE               	movwf	??_main+2
  1390  03CE  083D               	movf	??_main+1,w
  1391  03CF  07D6               	addwf	main@total_bpm,f
  1392  03D0  1803               	skipnc
  1393  03D1  0AD7               	incf	main@total_bpm+1,f
  1394  03D2  083E               	movf	??_main+2,w
  1395  03D3  07D7               	addwf	main@total_bpm+1,f
  1396                           
  1397                           ;main.c: 218: total_ibi += ibi_readings[i];
  1398  03D4  085C               	movf	main@i,w
  1399  03D5  00BC               	movwf	??_main
  1400  03D6  073C               	addwf	??_main,w
  1401  03D7  3E4C               	addlw	(low (main@ibi_readings| 0))& (0+255)
  1402  03D8  0084               	movwf	4
  1403  03D9  0800               	movf	0,w
  1404  03DA  00BD               	movwf	??_main+1
  1405  03DB  0A84               	incf	4,f
  1406  03DC  0800               	movf	0,w
  1407  03DD  00BE               	movwf	??_main+2
  1408  03DE  083D               	movf	??_main+1,w
  1409  03DF  07D8               	addwf	main@total_ibi,f
  1410  03E0  1803               	skipnc
  1411  03E1  0AD9               	incf	main@total_ibi+1,f
  1412  03E2  083E               	movf	??_main+2,w
  1413  03E3  07D9               	addwf	main@total_ibi+1,f
  1414  03E4  3001               	movlw	1
  1415  03E5  07DC               	addwf	main@i,f
  1416  03E6  1803               	skipnc
  1417  03E7  0ADD               	incf	main@i+1,f
  1418  03E8  3000               	movlw	0
  1419  03E9  07DD               	addwf	main@i+1,f
  1420  03EA  085D               	movf	main@i+1,w
  1421  03EB  3A80               	xorlw	128
  1422  03EC  00FF               	movwf	127
  1423  03ED  3080               	movlw	128
  1424  03EE  027F               	subwf	127,w
  1425  03EF  1D03               	skipz
  1426  03F0  2BF3               	goto	u2565
  1427  03F1  3005               	movlw	5
  1428  03F2  025C               	subwf	main@i,w
  1429  03F3                     u2565:	
  1430  03F3  1C03               	skipc
  1431  03F4  2BC1               	goto	l2494
  1432  03F5                     l2500:	
  1433                           
  1434                           ;main.c: 219: }
  1435                           ;main.c: 220: int avg_bpm = total_bpm / 5;
  1436  03F5  3005               	movlw	5
  1437  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1438  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1439  03F8  00A0               	movwf	___awdiv@divisor
  1440  03F9  3000               	movlw	0
  1441  03FA  00A1               	movwf	___awdiv@divisor+1
  1442  03FB  0857               	movf	main@total_bpm+1,w
  1443  03FC  00A3               	movwf	___awdiv@dividend+1
  1444  03FD  0856               	movf	main@total_bpm,w
  1445  03FE  00A2               	movwf	___awdiv@dividend
  1446  03FF  120A  118A  2798  120A  118A  	fcall	___awdiv
  1447  0404  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0405  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0406  0821               	movf	?___awdiv+1,w
  1450  0407  00DF               	movwf	main@avg_bpm+1
  1451  0408  0820               	movf	?___awdiv,w
  1452  0409  00DE               	movwf	main@avg_bpm
  1453                           
  1454                           ;main.c: 221: int avg_ibi = total_ibi / 5;
  1455  040A  3005               	movlw	5
  1456  040B  00A0               	movwf	___awdiv@divisor
  1457  040C  3000               	movlw	0
  1458  040D  00A1               	movwf	___awdiv@divisor+1
  1459  040E  0859               	movf	main@total_ibi+1,w
  1460  040F  00A3               	movwf	___awdiv@dividend+1
  1461  0410  0858               	movf	main@total_ibi,w
  1462  0411  00A2               	movwf	___awdiv@dividend
  1463  0412  120A  118A  2798  120A  118A  	fcall	___awdiv
  1464  0417  1283               	bcf	3,5	;RP0=0, select bank0
  1465  0418  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0419  0821               	movf	?___awdiv+1,w
  1467  041A  00C1               	movwf	main@avg_ibi+1
  1468  041B  0820               	movf	?___awdiv,w
  1469  041C  00C0               	movwf	main@avg_ibi
  1470                           
  1471                           ;main.c: 223: lcd_puts("BPM: ");
  1472  041D  3027               	movlw	(low (((STR_7+4)-__stringbase)| (0+32768)))& (0+255)
  1473  041E  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1474                           
  1475                           ;main.c: 224: lcd_print_number(BPM);
  1476  0423  1283               	bcf	3,5	;RP0=0, select bank0
  1477  0424  1303               	bcf	3,6	;RP1=0, select bank0
  1478  0425  0867               	movf	_BPM+1,w	;volatile
  1479  0426  00A8               	movwf	lcd_print_number@i+1
  1480  0427  0866               	movf	_BPM,w	;volatile
  1481  0428  00A7               	movwf	lcd_print_number@i
  1482  0429  120A  118A  2736  120A  118A  	fcall	_lcd_print_number
  1483                           
  1484                           ;main.c: 226: lcd_com(0xC0);
  1485  042E  30C0               	movlw	192
  1486  042F  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1487                           
  1488                           ;main.c: 227: lcd_puts("IBI: ");
  1489  0434  303E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1490  0435  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1491                           
  1492                           ;main.c: 228: lcd_print_number(IBI);
  1493  043A  1283               	bcf	3,5	;RP0=0, select bank0
  1494  043B  1303               	bcf	3,6	;RP1=0, select bank0
  1495  043C  086A               	movf	_IBI+1,w	;volatile
  1496  043D  00A8               	movwf	lcd_print_number@i+1
  1497  043E  0869               	movf	_IBI,w	;volatile
  1498  043F  00A7               	movwf	lcd_print_number@i
  1499  0440  120A  118A  2736  120A  118A  	fcall	_lcd_print_number
  1500                           
  1501                           ;main.c: 230: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1502  0445  3029               	movlw	41
  1503  0446  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0447  1303               	bcf	3,6	;RP1=0, select bank0
  1505  0448  00BE               	movwf	??_main+2
  1506  0449  3096               	movlw	150
  1507  044A  00BD               	movwf	??_main+1
  1508  044B  307E               	movlw	126
  1509  044C  00BC               	movwf	??_main
  1510  044D                     u2727:	
  1511  044D  0BBC               	decfsz	??_main,f
  1512  044E  2C4D               	goto	u2727
  1513  044F  0BBD               	decfsz	??_main+1,f
  1514  0450  2C4D               	goto	u2727
  1515  0451  0BBE               	decfsz	??_main+2,f
  1516  0452  2C4D               	goto	u2727
  1517  0453  0000               	nop
  1518                           
  1519                           ;main.c: 232: lcd_com(0x01);
  1520  0454  3001               	movlw	1
  1521  0455  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1522                           
  1523                           ;main.c: 233: _delay((unsigned long)((2)*(16000000/4000.0)));
  1524  045A  300B               	movlw	11
  1525  045B  1283               	bcf	3,5	;RP0=0, select bank0
  1526  045C  1303               	bcf	3,6	;RP1=0, select bank0
  1527  045D  00BD               	movwf	??_main+1
  1528  045E  3061               	movlw	97
  1529  045F  00BC               	movwf	??_main
  1530  0460                     u2737:	
  1531  0460  0BBC               	decfsz	??_main,f
  1532  0461  2C60               	goto	u2737
  1533  0462  0BBD               	decfsz	??_main+1,f
  1534  0463  2C60               	goto	u2737
  1535  0464  2C65               	nop2
  1536                           
  1537                           ;main.c: 234: lcd_com(0x80);
  1538  0465  3080               	movlw	128
  1539  0466  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1540                           
  1541                           ;main.c: 235: if (avg_bpm < 60) {
  1542  046B  1283               	bcf	3,5	;RP0=0, select bank0
  1543  046C  1303               	bcf	3,6	;RP1=0, select bank0
  1544  046D  085F               	movf	main@avg_bpm+1,w
  1545  046E  3A80               	xorlw	128
  1546  046F  00FF               	movwf	127
  1547  0470  3080               	movlw	128
  1548  0471  027F               	subwf	127,w
  1549  0472  1D03               	skipz
  1550  0473  2C76               	goto	u2575
  1551  0474  303C               	movlw	60
  1552  0475  025E               	subwf	main@avg_bpm,w
  1553  0476                     u2575:	
  1554  0476  1803               	skipnc
  1555  0477  2C7A               	goto	l2520
  1556                           
  1557                           ;main.c: 236: lcd_puts("BPM Low");
  1558  0478  3036               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1559  0479  2C8A               	goto	L4
  1560  047A                     l2520:	
  1561                           ;main.c: 237: } else if (avg_bpm > 100) {
  1562                           
  1563  047A  1283               	bcf	3,5	;RP0=0, select bank0
  1564  047B  1303               	bcf	3,6	;RP1=0, select bank0
  1565  047C  085F               	movf	main@avg_bpm+1,w
  1566  047D  3A80               	xorlw	128
  1567  047E  00FF               	movwf	127
  1568  047F  3080               	movlw	128
  1569  0480  027F               	subwf	127,w
  1570  0481  1D03               	skipz
  1571  0482  2C85               	goto	u2585
  1572  0483  3065               	movlw	101
  1573  0484  025E               	subwf	main@avg_bpm,w
  1574  0485                     u2585:	
  1575  0485  1C03               	skipc
  1576  0486  2C89               	goto	l2524
  1577                           
  1578                           ;main.c: 238: lcd_puts("BPM High");
  1579  0487  302D               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1580  0488  2C8A               	goto	L4
  1581  0489                     l2524:	
  1582                           ;main.c: 239: } else {
  1583                           
  1584                           
  1585                           ;main.c: 240: lcd_puts("BPM Normal");
  1586  0489  300D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1587  048A                     L4:	
  1588  048A  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1589                           
  1590                           ;main.c: 241: }
  1591                           ;main.c: 243: lcd_com(0xC0);
  1592  048F  30C0               	movlw	192
  1593  0490  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1594                           
  1595                           ;main.c: 244: lcd_puts("Avg BPM: ");
  1596  0495  3023               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1597  0496  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1598                           
  1599                           ;main.c: 245: lcd_print_number(avg_bpm);
  1600  049B  1283               	bcf	3,5	;RP0=0, select bank0
  1601  049C  1303               	bcf	3,6	;RP1=0, select bank0
  1602  049D  085F               	movf	main@avg_bpm+1,w
  1603  049E  00A8               	movwf	lcd_print_number@i+1
  1604  049F  085E               	movf	main@avg_bpm,w
  1605  04A0  00A7               	movwf	lcd_print_number@i
  1606  04A1  120A  118A  2736  120A  118A  	fcall	_lcd_print_number
  1607                           
  1608                           ;main.c: 248: if (avg_bpm < 60 || avg_bpm > 100) {
  1609  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1610  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1611  04A8  085F               	movf	main@avg_bpm+1,w
  1612  04A9  3A80               	xorlw	128
  1613  04AA  00FF               	movwf	127
  1614  04AB  3080               	movlw	128
  1615  04AC  027F               	subwf	127,w
  1616  04AD  1D03               	skipz
  1617  04AE  2CB1               	goto	u2595
  1618  04AF  303C               	movlw	60
  1619  04B0  025E               	subwf	main@avg_bpm,w
  1620  04B1                     u2595:	
  1621  04B1  1C03               	skipc
  1622  04B2  2CC0               	goto	l2536
  1623  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  1624  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  1625  04B5  085F               	movf	main@avg_bpm+1,w
  1626  04B6  3A80               	xorlw	128
  1627  04B7  00FF               	movwf	127
  1628  04B8  3080               	movlw	128
  1629  04B9  027F               	subwf	127,w
  1630  04BA  1D03               	skipz
  1631  04BB  2CBE               	goto	u2605
  1632  04BC  3065               	movlw	101
  1633  04BD  025E               	subwf	main@avg_bpm,w
  1634  04BE                     u2605:	
  1635  04BE  1C03               	skipc
  1636  04BF  2CC2               	goto	l2538
  1637  04C0                     l2536:	
  1638                           
  1639                           ;main.c: 249: buzzer_control(1);
  1640  04C0  3001               	movlw	1
  1641  04C1  2CC3               	goto	L2
  1642  04C2                     l2538:	
  1643                           ;main.c: 250: } else {
  1644                           
  1645                           
  1646                           ;main.c: 251: buzzer_control(0);
  1647  04C2  3000               	movlw	0
  1648  04C3                     L2:	
  1649  04C3  120A  118A  26D2  120A  118A  	fcall	_buzzer_control
  1650                           
  1651                           ;main.c: 252: }
  1652                           ;main.c: 254: rgb_led_control(avg_bpm);
  1653  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1654  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1655  04CA  085F               	movf	main@avg_bpm+1,w
  1656  04CB  00F5               	movwf	rgb_led_control@bpm+1
  1657  04CC  085E               	movf	main@avg_bpm,w
  1658  04CD  00F4               	movwf	rgb_led_control@bpm
  1659  04CE  120A  158A  2710  120A  118A  	fcall	_rgb_led_control
  1660                           
  1661                           ;main.c: 256: reading_count = 0;
  1662  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1663  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1664  04D5  01DA               	clrf	main@reading_count
  1665  04D6  01DB               	clrf	main@reading_count+1
  1666                           
  1667                           ;main.c: 257: } else {
  1668  04D7  2D2D               	goto	l2558
  1669  04D8                     l2542:	
  1670                           
  1671                           ;main.c: 258: lcd_puts("BPM: ");
  1672  04D8  3027               	movlw	(low (((STR_7+4)-__stringbase)| (0+32768)))& (0+255)
  1673  04D9  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1674                           
  1675                           ;main.c: 259: lcd_print_number(BPM);
  1676  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  1677  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  1678  04E0  0867               	movf	_BPM+1,w	;volatile
  1679  04E1  00A8               	movwf	lcd_print_number@i+1
  1680  04E2  0866               	movf	_BPM,w	;volatile
  1681  04E3  00A7               	movwf	lcd_print_number@i
  1682  04E4  120A  118A  2736  120A  118A  	fcall	_lcd_print_number
  1683                           
  1684                           ;main.c: 261: lcd_com(0xC0);
  1685  04E9  30C0               	movlw	192
  1686  04EA  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1687                           
  1688                           ;main.c: 262: lcd_puts("IBI: ");
  1689  04EF  303E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1690  04F0  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1691                           
  1692                           ;main.c: 263: lcd_print_number(IBI);
  1693  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1694  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1695  04F7  086A               	movf	_IBI+1,w	;volatile
  1696  04F8  00A8               	movwf	lcd_print_number@i+1
  1697  04F9  0869               	movf	_IBI,w	;volatile
  1698  04FA  00A7               	movwf	lcd_print_number@i
  1699  04FB  120A  118A  2736  120A  118A  	fcall	_lcd_print_number
  1700                           
  1701                           ;main.c: 266: if (BPM < 60 || BPM > 100) {
  1702  0500  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0501  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0502  0867               	movf	_BPM+1,w	;volatile
  1705  0503  3A80               	xorlw	128
  1706  0504  00FF               	movwf	127
  1707  0505  3080               	movlw	128
  1708  0506  027F               	subwf	127,w
  1709  0507  1D03               	skipz
  1710  0508  2D0B               	goto	u2615
  1711  0509  303C               	movlw	60
  1712  050A  0266               	subwf	_BPM,w	;volatile
  1713  050B                     u2615:	
  1714  050B  1C03               	skipc
  1715  050C  2D1A               	goto	l2554
  1716  050D  1283               	bcf	3,5	;RP0=0, select bank0
  1717  050E  1303               	bcf	3,6	;RP1=0, select bank0
  1718  050F  0867               	movf	_BPM+1,w	;volatile
  1719  0510  3A80               	xorlw	128
  1720  0511  00FF               	movwf	127
  1721  0512  3080               	movlw	128
  1722  0513  027F               	subwf	127,w
  1723  0514  1D03               	skipz
  1724  0515  2D18               	goto	u2625
  1725  0516  3065               	movlw	101
  1726  0517  0266               	subwf	_BPM,w	;volatile
  1727  0518                     u2625:	
  1728  0518  1C03               	skipc
  1729  0519  2D1C               	goto	l2556
  1730  051A                     l2554:	
  1731                           
  1732                           ;main.c: 267: buzzer_control(1);
  1733  051A  3001               	movlw	1
  1734  051B  2D1D               	goto	L3
  1735  051C                     l2556:	
  1736                           ;main.c: 268: } else {
  1737                           
  1738                           
  1739                           ;main.c: 269: buzzer_control(0);
  1740  051C  3000               	movlw	0
  1741  051D                     L3:	
  1742  051D  120A  118A  26D2  120A  118A  	fcall	_buzzer_control
  1743                           
  1744                           ;main.c: 270: }
  1745                           ;main.c: 271: rgb_led_control(BPM);
  1746  0522  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0523  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0524  0867               	movf	_BPM+1,w	;volatile
  1749  0525  00F5               	movwf	rgb_led_control@bpm+1
  1750  0526  0866               	movf	_BPM,w	;volatile
  1751  0527  00F4               	movwf	rgb_led_control@bpm
  1752  0528  120A  158A  2710  120A  118A  	fcall	_rgb_led_control
  1753  052D                     l2558:	
  1754                           
  1755                           ;main.c: 272: }
  1756                           ;main.c: 273: }
  1757                           ;main.c: 274: main_state = 0;
  1758  052D  1683               	bsf	3,5	;RP0=1, select bank1
  1759  052E  1303               	bcf	3,6	;RP1=0, select bank1
  1760  052F  01E8               	clrf	_main_state^(0+128)
  1761  0530  01E9               	clrf	(_main_state+1)^(0+128)
  1762  0531                     l2562:	
  1763                           ;main.c: 279: }
  1764                           
  1765                           ;main.c: 278: break;
  1766                           
  1767                           ;main.c: 277: default:
  1768                           
  1769                           ;main.c: 275: break;
  1770                           
  1771                           
  1772                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1773                           ; Switch size 1, requested type "space"
  1774                           ; Number of cases is 1, Range of values is 0 to 0
  1775                           ; switch strategies available:
  1776                           ; Name         Instructions Cycles
  1777                           ; simple_byte            4     3 (average)
  1778                           ; direct_byte           11     8 (fixed)
  1779                           ; jumptable            260     6 (fixed)
  1780                           ;	Chosen strategy is simple_byte
  1781  0531  1683               	bsf	3,5	;RP0=1, select bank1
  1782  0532  1303               	bcf	3,6	;RP1=0, select bank1
  1783  0533  0869               	movf	(_main_state+1)^(0+128),w
  1784  0534  3A00               	xorlw	0	; case 0
  1785  0535  1903               	skipnz
  1786  0536  2D38               	goto	l2658
  1787  0537  2D31               	goto	l2562
  1788  0538                     l2658:	
  1789                           
  1790                           ; Switch size 1, requested type "space"
  1791                           ; Number of cases is 3, Range of values is 1 to 3
  1792                           ; switch strategies available:
  1793                           ; Name         Instructions Cycles
  1794                           ; simple_byte           10     6 (average)
  1795                           ; direct_byte           20    11 (fixed)
  1796                           ; jumptable            263     9 (fixed)
  1797                           ;	Chosen strategy is simple_byte
  1798  0538  0868               	movf	_main_state^(0+128),w
  1799  0539  3A01               	xorlw	1	; case 1
  1800  053A  1903               	skipnz
  1801  053B  2B07               	goto	l2450
  1802  053C  3A03               	xorlw	3	; case 2
  1803  053D  1903               	skipnz
  1804  053E  2B29               	goto	l2456
  1805  053F  3A01               	xorlw	1	; case 3
  1806  0540  1903               	skipnz
  1807  0541  2B3F               	goto	l2460
  1808  0542  2D31               	goto	l2562
  1809  0543  2D31               	goto	l2562
  1810  0544                     __end_of_main:	
  1811                           
  1812                           	psect	text1
  1813  0662                     __ptext1:	
  1814 ;; *************** function _system_init *****************
  1815 ;; Defined at:
  1816 ;;		line 283 in file "main.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0
  1832 ;;      Temps:          0       3       0       0       0
  1833 ;;      Totals:         0       3       0       0       0
  1834 ;;Total ram usage:        3 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    7
  1837 ;; This function calls:
  1838 ;;		_ADC_Init
  1839 ;;		_TMR0_Initialize
  1840 ;;		_TMR0_StartTimer
  1841 ;;		_lcd_com
  1842 ;;		_lcd_init
  1843 ;;		_lcd_puts
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           
  1850                           ;psect for function _system_init
  1851  0662                     _system_init:	
  1852                           
  1853                           ;main.c: 284: TRISB = 0x00;
  1854                           
  1855                           ;incstack = 0
  1856                           ; Regs used in _system_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1857  0662  1683               	bsf	3,5	;RP0=1, select bank1
  1858  0663  1303               	bcf	3,6	;RP1=0, select bank1
  1859  0664  0186               	clrf	6	;volatile
  1860                           
  1861                           ;main.c: 285: lcd_init();
  1862  0665  120A  118A  2544  120A  118A  	fcall	_lcd_init
  1863                           
  1864                           ;main.c: 286: _delay((unsigned long)((20)*(16000000/4000.0)));
  1865  066A  3068               	movlw	104
  1866  066B  1283               	bcf	3,5	;RP0=0, select bank0
  1867  066C  1303               	bcf	3,6	;RP1=0, select bank0
  1868  066D  00AB               	movwf	??_system_init+1
  1869  066E  30E3               	movlw	227
  1870  066F  00AA               	movwf	??_system_init
  1871  0670                     u2747:	
  1872  0670  0BAA               	decfsz	??_system_init,f
  1873  0671  2E70               	goto	u2747
  1874  0672  0BAB               	decfsz	??_system_init+1,f
  1875  0673  2E70               	goto	u2747
  1876  0674  2E75               	nop2
  1877                           
  1878                           ;main.c: 287: lcd_com(0x01);
  1879  0675  3001               	movlw	1
  1880  0676  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1881                           
  1882                           ;main.c: 288: _delay((unsigned long)((2)*(16000000/4000.0)));
  1883  067B  300B               	movlw	11
  1884  067C  1283               	bcf	3,5	;RP0=0, select bank0
  1885  067D  1303               	bcf	3,6	;RP1=0, select bank0
  1886  067E  00AB               	movwf	??_system_init+1
  1887  067F  3061               	movlw	97
  1888  0680  00AA               	movwf	??_system_init
  1889  0681                     u2757:	
  1890  0681  0BAA               	decfsz	??_system_init,f
  1891  0682  2E81               	goto	u2757
  1892  0683  0BAB               	decfsz	??_system_init+1,f
  1893  0684  2E81               	goto	u2757
  1894  0685  2E86               	nop2
  1895                           
  1896                           ;main.c: 289: lcd_com(0x80);
  1897  0686  3080               	movlw	128
  1898  0687  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1899                           
  1900                           ;main.c: 290: lcd_puts("Wlc Doctor");
  1901  068C  3018               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1902  068D  120A  158A  26BF  120A  118A  	fcall	_lcd_puts
  1903                           
  1904                           ;main.c: 291: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1905  0692  3029               	movlw	41
  1906  0693  1283               	bcf	3,5	;RP0=0, select bank0
  1907  0694  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0695  00AC               	movwf	??_system_init+2
  1909  0696  3096               	movlw	150
  1910  0697  00AB               	movwf	??_system_init+1
  1911  0698  307E               	movlw	126
  1912  0699  00AA               	movwf	??_system_init
  1913  069A                     u2767:	
  1914  069A  0BAA               	decfsz	??_system_init,f
  1915  069B  2E9A               	goto	u2767
  1916  069C  0BAB               	decfsz	??_system_init+1,f
  1917  069D  2E9A               	goto	u2767
  1918  069E  0BAC               	decfsz	??_system_init+2,f
  1919  069F  2E9A               	goto	u2767
  1920  06A0  0000               	nop
  1921                           
  1922                           ;main.c: 292: lcd_com(0x01);
  1923  06A1  3001               	movlw	1
  1924  06A2  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  1925                           
  1926                           ;main.c: 293: _delay((unsigned long)((2)*(16000000/4000.0)));
  1927  06A7  300B               	movlw	11
  1928  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  1929  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  1930  06AA  00AB               	movwf	??_system_init+1
  1931  06AB  3061               	movlw	97
  1932  06AC  00AA               	movwf	??_system_init
  1933  06AD                     u2777:	
  1934  06AD  0BAA               	decfsz	??_system_init,f
  1935  06AE  2EAD               	goto	u2777
  1936  06AF  0BAB               	decfsz	??_system_init+1,f
  1937  06B0  2EAD               	goto	u2777
  1938  06B1  2EB2               	nop2
  1939                           
  1940                           ;main.c: 295: TMR0_Initialize();
  1941  06B2  120A  158A  262B  120A  118A  	fcall	_TMR0_Initialize
  1942                           
  1943                           ;main.c: 296: TMR0_StartTimer();
  1944  06B7  120A  158A  25EC  120A  118A  	fcall	_TMR0_StartTimer
  1945                           
  1946                           ;main.c: 298: ADC_Init();
  1947  06BC  120A  158A  2600   	fcall	_ADC_Init
  1948                           
  1949                           ;main.c: 301: TRISBbits.TRISB3 = 0;
  1950  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  1951  06C0  1303               	bcf	3,6	;RP1=0, select bank1
  1952  06C1  1186               	bcf	6,3	;volatile
  1953                           
  1954                           ;main.c: 302: RB3 = 0;
  1955  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1956  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1957  06C4  1186               	bcf	6,3	;volatile
  1958                           
  1959                           ;main.c: 305: TRISCbits.TRISC5 = 0;
  1960  06C5  1683               	bsf	3,5	;RP0=1, select bank1
  1961  06C6  1303               	bcf	3,6	;RP1=0, select bank1
  1962  06C7  1287               	bcf	7,5	;volatile
  1963                           
  1964                           ;main.c: 306: TRISCbits.TRISC6 = 0;
  1965  06C8  1307               	bcf	7,6	;volatile
  1966                           
  1967                           ;main.c: 307: TRISCbits.TRISC7 = 0;
  1968  06C9  1387               	bcf	7,7	;volatile
  1969                           
  1970                           ;main.c: 310: PORTCbits.RC5 = 0;
  1971  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1972  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1973  06CC  1287               	bcf	7,5	;volatile
  1974                           
  1975                           ;main.c: 311: PORTCbits.RC6 = 0;
  1976  06CD  1307               	bcf	7,6	;volatile
  1977                           
  1978                           ;main.c: 312: PORTCbits.RC7 = 0;
  1979  06CE  1387               	bcf	7,7	;volatile
  1980                           
  1981                           ;main.c: 316: (INTCONbits.GIE = 1);
  1982  06CF  178B               	bsf	11,7	;volatile
  1983                           
  1984                           ;main.c: 317: (INTCONbits.PEIE = 1);
  1985  06D0  170B               	bsf	11,6	;volatile
  1986  06D1  0008               	return
  1987  06D2                     __end_of_system_init:	
  1988                           
  1989                           	psect	text2
  1990  0EBF                     __ptext2:	
  1991 ;; *************** function _lcd_puts *****************
  1992 ;; Defined at:
  1993 ;;		line 96 in file "supporing_cfile/lcd.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  str             1    wreg     PTR unsigned char 
  1996 ;;		 -> STR_10(11), STR_9(6), STR_8(6), STR_7(10), 
  1997 ;;		 -> STR_6(11), STR_5(9), STR_4(8), STR_3(6), 
  1998 ;;		 -> STR_2(6), STR_1(11), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  str             1    9[BANK0 ] PTR unsigned char 
  2001 ;;		 -> STR_10(11), STR_9(6), STR_8(6), STR_7(10), 
  2002 ;;		 -> STR_6(11), STR_5(9), STR_4(8), STR_3(6), 
  2003 ;;		 -> STR_2(6), STR_1(11), 
  2004 ;;  i               2    7[BANK0 ] unsigned int 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2014 ;;      Params:         0       0       0       0       0
  2015 ;;      Locals:         0       3       0       0       0
  2016 ;;      Temps:          0       0       0       0       0
  2017 ;;      Totals:         0       3       0       0       0
  2018 ;;Total ram usage:        3 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    6
  2021 ;; This function calls:
  2022 ;;		_lcd_data
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;;		_system_init
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           
  2030                           ;psect for function _lcd_puts
  2031  0EBF                     _lcd_puts:	
  2032                           
  2033                           ;incstack = 0
  2034 ;; using string table level
  2035                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2036                           ;lcd_puts@str stored from wreg
  2037  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  2038  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  2039  0EC1  00A9               	movwf	lcd_puts@str
  2040                           
  2041                           ;lcd.c: 98: unsigned int i=0;
  2042  0EC2  01A7               	clrf	lcd_puts@i
  2043  0EC3  01A8               	clrf	lcd_puts@i+1
  2044  0EC4                     l2178:	
  2045                           ;lcd.c: 99: for(;str[i]!=0;i++)
  2046                           
  2047  0EC4  0827               	movf	lcd_puts@i,w
  2048  0EC5  0729               	addwf	lcd_puts@str,w
  2049  0EC6  0084               	movwf	4
  2050  0EC7  120A  158A  2000  120A  158A  	fcall	stringdir
  2051  0ECC  3A00               	xorlw	0
  2052  0ECD  1903               	btfsc	3,2
  2053  0ECE  0008               	return
  2054                           
  2055                           ;lcd.c: 100: lcd_data(str[i]);
  2056  0ECF  0827               	movf	lcd_puts@i,w
  2057  0ED0  0729               	addwf	lcd_puts@str,w
  2058  0ED1  0084               	movwf	4
  2059  0ED2  120A  158A  2000  120A  158A  	fcall	stringdir
  2060  0ED7  120A  158A  2610  120A  158A  	fcall	_lcd_data
  2061  0EDC  3001               	movlw	1
  2062  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0EDF  07A7               	addwf	lcd_puts@i,f
  2065  0EE0  1803               	skipnc
  2066  0EE1  0AA8               	incf	lcd_puts@i+1,f
  2067  0EE2  3000               	movlw	0
  2068  0EE3  07A8               	addwf	lcd_puts@i+1,f
  2069  0EE4  2EC4               	goto	l2178
  2070  0EE5                     __end_of_lcd_puts:	
  2071                           
  2072                           	psect	text3
  2073  0544                     __ptext3:	
  2074 ;; *************** function _lcd_init *****************
  2075 ;; Defined at:
  2076 ;;		line 73 in file "supporing_cfile/lcd.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0, pclath, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         0       0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0
  2093 ;;      Totals:         0       0       0       0       0
  2094 ;;Total ram usage:        0 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    5
  2097 ;; This function calls:
  2098 ;;		_delay
  2099 ;;		_lcd_com
  2100 ;;		_lcd_init_write
  2101 ;; This function is called by:
  2102 ;;		_system_init
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _lcd_init
  2108  0544                     _lcd_init:	
  2109                           
  2110                           ;lcd.c: 75: delay(300);
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  2114  0544  302C               	movlw	44
  2115  0545  00F4               	movwf	delay@j
  2116  0546  3001               	movlw	1
  2117  0547  00F5               	movwf	delay@j+1
  2118  0548  120A  158A  2665  120A  118A  	fcall	_delay
  2119                           
  2120                           ;lcd.c: 76: lcd_init_write(0x30);
  2121  054D  3030               	movlw	48
  2122  054E  120A  158A  263D  120A  118A  	fcall	_lcd_init_write
  2123                           
  2124                           ;lcd.c: 77: delay(300);
  2125  0553  302C               	movlw	44
  2126  0554  00F4               	movwf	delay@j
  2127  0555  3001               	movlw	1
  2128  0556  00F5               	movwf	delay@j+1
  2129  0557  120A  158A  2665  120A  118A  	fcall	_delay
  2130                           
  2131                           ;lcd.c: 78: lcd_init_write(0x30);
  2132  055C  3030               	movlw	48
  2133  055D  120A  158A  263D  120A  118A  	fcall	_lcd_init_write
  2134                           
  2135                           ;lcd.c: 79: delay(300);
  2136  0562  302C               	movlw	44
  2137  0563  00F4               	movwf	delay@j
  2138  0564  3001               	movlw	1
  2139  0565  00F5               	movwf	delay@j+1
  2140  0566  120A  158A  2665  120A  118A  	fcall	_delay
  2141                           
  2142                           ;lcd.c: 80: lcd_init_write(0x30);
  2143  056B  3030               	movlw	48
  2144  056C  120A  158A  263D  120A  118A  	fcall	_lcd_init_write
  2145                           
  2146                           ;lcd.c: 81: delay(300);
  2147  0571  302C               	movlw	44
  2148  0572  00F4               	movwf	delay@j
  2149  0573  3001               	movlw	1
  2150  0574  00F5               	movwf	delay@j+1
  2151  0575  120A  158A  2665  120A  118A  	fcall	_delay
  2152                           
  2153                           ;lcd.c: 82: lcd_init_write(0x20);
  2154  057A  3020               	movlw	32
  2155  057B  120A  158A  263D  120A  118A  	fcall	_lcd_init_write
  2156                           
  2157                           ;lcd.c: 83: delay(300);
  2158  0580  302C               	movlw	44
  2159  0581  00F4               	movwf	delay@j
  2160  0582  3001               	movlw	1
  2161  0583  00F5               	movwf	delay@j+1
  2162  0584  120A  158A  2665  120A  118A  	fcall	_delay
  2163                           
  2164                           ;lcd.c: 84: lcd_com(0xC);
  2165  0589  300C               	movlw	12
  2166  058A  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  2167                           
  2168                           ;lcd.c: 86: delay(300);
  2169  058F  302C               	movlw	44
  2170  0590  00F4               	movwf	delay@j
  2171  0591  3001               	movlw	1
  2172  0592  00F5               	movwf	delay@j+1
  2173  0593  120A  158A  2665  120A  118A  	fcall	_delay
  2174                           
  2175                           ;lcd.c: 87: lcd_com(4);
  2176  0598  3004               	movlw	4
  2177  0599  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  2178                           
  2179                           ;lcd.c: 88: delay(300);
  2180  059E  302C               	movlw	44
  2181  059F  00F4               	movwf	delay@j
  2182  05A0  3001               	movlw	1
  2183  05A1  00F5               	movwf	delay@j+1
  2184  05A2  120A  158A  2665  120A  118A  	fcall	_delay
  2185                           
  2186                           ;lcd.c: 89: lcd_com(0x85);
  2187  05A7  3085               	movlw	133
  2188  05A8  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  2189                           
  2190                           ;lcd.c: 90: delay(300);
  2191  05AD  302C               	movlw	44
  2192  05AE  00F4               	movwf	delay@j
  2193  05AF  3001               	movlw	1
  2194  05B0  00F5               	movwf	delay@j+1
  2195  05B1  120A  158A  2665  120A  118A  	fcall	_delay
  2196                           
  2197                           ;lcd.c: 91: lcd_com(6);
  2198  05B6  3006               	movlw	6
  2199  05B7  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  2200                           
  2201                           ;lcd.c: 92: delay(300);
  2202  05BC  302C               	movlw	44
  2203  05BD  00F4               	movwf	delay@j
  2204  05BE  3001               	movlw	1
  2205  05BF  00F5               	movwf	delay@j+1
  2206  05C0  120A  158A  2665  120A  118A  	fcall	_delay
  2207                           
  2208                           ;lcd.c: 93: lcd_com(1);
  2209  05C5  3001               	movlw	1
  2210  05C6  120A  158A  27B5  120A  118A  	fcall	_lcd_com
  2211                           
  2212                           ;lcd.c: 94: delay(300);
  2213  05CB  302C               	movlw	44
  2214  05CC  00F4               	movwf	delay@j
  2215  05CD  3001               	movlw	1
  2216  05CE  00F5               	movwf	delay@j+1
  2217  05CF  120A  158A  2665   	fcall	_delay
  2218  05D2  0008               	return
  2219  05D3                     __end_of_lcd_init:	
  2220                           
  2221                           	psect	text4
  2222  0E3D                     __ptext4:	
  2223 ;; *************** function _lcd_init_write *****************
  2224 ;; Defined at:
  2225 ;;		line 29 in file "supporing_cfile/lcd.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  a               1    wreg     unsigned char 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  a               1    2[BANK0 ] unsigned char 
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  1    wreg      void 
  2232 ;; Registers used:
  2233 ;;		wreg, status,2, status,0, pclath, cstack
  2234 ;; Tracked objects:
  2235 ;;		On entry : 0/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2239 ;;      Params:         0       0       0       0       0
  2240 ;;      Locals:         0       1       0       0       0
  2241 ;;      Temps:          0       0       0       0       0
  2242 ;;      Totals:         0       1       0       0       0
  2243 ;;Total ram usage:        1 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; Hardware stack levels required when called:    4
  2246 ;; This function calls:
  2247 ;;		_delay
  2248 ;; This function is called by:
  2249 ;;		_lcd_init
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           
  2254                           ;psect for function _lcd_init_write
  2255  0E3D                     _lcd_init_write:	
  2256                           
  2257                           ;incstack = 0
  2258                           ; Regs used in _lcd_init_write: [wreg+status,2+status,0+pclath+cstack]
  2259                           ;lcd_init_write@a stored from wreg
  2260  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  2261  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  2262  0E3F  00A2               	movwf	lcd_init_write@a
  2263                           
  2264                           ;lcd.c: 31: PORTBbits.RB0=0;
  2265  0E40  1006               	bcf	6,0	;volatile
  2266                           
  2267                           ;lcd.c: 32: PORTBbits.RB1=0;
  2268  0E41  1086               	bcf	6,1	;volatile
  2269                           
  2270                           ;lcd.c: 33: PORTB=a;
  2271  0E42  0822               	movf	lcd_init_write@a,w
  2272  0E43  0086               	movwf	6	;volatile
  2273                           
  2274                           ;lcd.c: 34: PORTBbits.RB2=1;
  2275  0E44  1506               	bsf	6,2	;volatile
  2276                           
  2277                           ;lcd.c: 35: delay(300);
  2278  0E45  302C               	movlw	44
  2279  0E46  00F4               	movwf	delay@j
  2280  0E47  3001               	movlw	1
  2281  0E48  00F5               	movwf	delay@j+1
  2282  0E49  120A  158A  2665   	fcall	_delay
  2283                           
  2284                           ;lcd.c: 36: PORTBbits.RB2=0;
  2285  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0E4E  1106               	bcf	6,2	;volatile
  2288  0E4F  0008               	return
  2289  0E50                     __end_of_lcd_init_write:	
  2290                           
  2291                           	psect	text5
  2292  0DEC                     __ptext5:	
  2293 ;; *************** function _TMR0_StartTimer *****************
  2294 ;; Defined at:
  2295 ;;		line 25 in file "supporing_cfile/tmr0.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		None
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2309 ;;      Params:         0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    3
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_system_init
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function _TMR0_StartTimer
  2325  0DEC                     _TMR0_StartTimer:	
  2326                           
  2327                           ;tmr0.c: 28: INTCONbits.TMR0IE = 1;
  2328                           
  2329                           ;incstack = 0
  2330                           ; Regs used in _TMR0_StartTimer: []
  2331  0DEC  168B               	bsf	11,5	;volatile
  2332  0DED  0008               	return
  2333  0DEE                     __end_of_TMR0_StartTimer:	
  2334                           
  2335                           	psect	text6
  2336  0E2B                     __ptext6:	
  2337 ;; *************** function _TMR0_Initialize *****************
  2338 ;; Defined at:
  2339 ;;		line 7 in file "supporing_cfile/tmr0.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2353 ;;      Params:         0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0
  2356 ;;      Totals:         0       0       0       0       0
  2357 ;;Total ram usage:        0 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    3
  2360 ;; This function calls:
  2361 ;;		Nothing
  2362 ;; This function is called by:
  2363 ;;		_system_init
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function _TMR0_Initialize
  2369  0E2B                     _TMR0_Initialize:	
  2370                           
  2371                           ;tmr0.c: 12: OPTION_REGbits.T0CS = 0;
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _TMR0_Initialize: [wreg-fsr0h+status,2+status,0+pclath]
  2375  0E2B  1683               	bsf	3,5	;RP0=1, select bank1
  2376  0E2C  1303               	bcf	3,6	;RP1=0, select bank1
  2377  0E2D  1281               	bcf	1,5	;volatile
  2378                           
  2379                           ;tmr0.c: 13: OPTION_REGbits.T0SE = 1;
  2380  0E2E  1601               	bsf	1,4	;volatile
  2381                           
  2382                           ;tmr0.c: 14: OPTION_REGbits.PSA = 0;
  2383  0E2F  1181               	bcf	1,3	;volatile
  2384                           
  2385                           ;tmr0.c: 15: OPTION_REGbits.PS = 0x07;
  2386  0E30  3007               	movlw	7
  2387  0E31  0481               	iorwf	1,f	;volatile
  2388                           
  2389                           ;tmr0.c: 17: TMR0 = (uint8_t)(tmr0_mask & (256-(((2 *200000000)/(256*4))/1000)));
  2390  0E32  3001               	movlw	low (_tmr0_mask-__stringbase)
  2391  0E33  0084               	movwf	4
  2392  0E34  120A  158A  2000   	fcall	stringdir
  2393  0E37  397A               	andlw	122
  2394  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0E3A  0081               	movwf	1	;volatile
  2397                           
  2398                           ;tmr0.c: 21: INTCONbits.TMR0IF = 0;
  2399  0E3B  110B               	bcf	11,2	;volatile
  2400  0E3C  0008               	return
  2401  0E3D                     __end_of_TMR0_Initialize:	
  2402                           
  2403                           	psect	text7
  2404  0E00                     __ptext7:	
  2405 ;; *************** function _ADC_Init *****************
  2406 ;; Defined at:
  2407 ;;		line 20 in file "supporing_cfile/adc.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;		None
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, status,2
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         0       0       0       0       0
  2422 ;;      Locals:         0       0       0       0       0
  2423 ;;      Temps:          0       0       0       0       0
  2424 ;;      Totals:         0       0       0       0       0
  2425 ;;Total ram usage:        0 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    3
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_system_init
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _ADC_Init
  2437  0E00                     _ADC_Init:	
  2438                           
  2439                           ;adc.c: 22: ADCON0=0x00;
  2440                           
  2441                           ;incstack = 0
  2442                           ; Regs used in _ADC_Init: [wreg+status,2]
  2443  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  2444  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  2445  0E02  019F               	clrf	31	;volatile
  2446                           
  2447                           ;adc.c: 23: ADCON1=(1<<7);
  2448  0E03  3080               	movlw	128
  2449  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  2450  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  2451  0E06  009F               	movwf	31	;volatile
  2452  0E07  0008               	return
  2453  0E08                     __end_of_ADC_Init:	
  2454                           
  2455                           	psect	text8
  2456  0F10                     __ptext8:	
  2457 ;; *************** function _rgb_led_control *****************
  2458 ;; Defined at:
  2459 ;;		line 157 in file "main.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  bpm             2    4[COMMON] int 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;		None
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg, btemp+1
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2473 ;;      Params:         2       0       0       0       0
  2474 ;;      Locals:         0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0
  2476 ;;      Totals:         2       0       0       0       0
  2477 ;;Total ram usage:        2 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    3
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           
  2488                           ;psect for function _rgb_led_control
  2489  0F10                     _rgb_led_control:	
  2490                           
  2491                           ;main.c: 158: if (bpm < 60) {
  2492                           
  2493                           ;incstack = 0
  2494                           ; Regs used in _rgb_led_control: [wreg+btemp+1]
  2495  0F10  0875               	movf	rgb_led_control@bpm+1,w
  2496  0F11  3A80               	xorlw	128
  2497  0F12  00FF               	movwf	127
  2498  0F13  3080               	movlw	128
  2499  0F14  027F               	subwf	127,w
  2500  0F15  1D03               	skipz
  2501  0F16  2F19               	goto	u1685
  2502  0F17  303C               	movlw	60
  2503  0F18  0274               	subwf	rgb_led_control@bpm,w
  2504  0F19                     u1685:	
  2505  0F19  1803               	skipnc
  2506  0F1A  2F21               	goto	l1800
  2507                           
  2508                           ;main.c: 160: PORTCbits.RC5 = 0;
  2509  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  2510  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  2511  0F1D  1287               	bcf	7,5	;volatile
  2512                           
  2513                           ;main.c: 161: PORTCbits.RC6 = 0;
  2514  0F1E  1307               	bcf	7,6	;volatile
  2515                           
  2516                           ;main.c: 162: PORTCbits.RC7 = 1;
  2517  0F1F  1787               	bsf	7,7	;volatile
  2518                           
  2519                           ;main.c: 163: } else if (bpm >= 60 && bpm <= 100) {
  2520  0F20  0008               	return
  2521  0F21                     l1800:	
  2522  0F21  0875               	movf	rgb_led_control@bpm+1,w
  2523  0F22  3A80               	xorlw	128
  2524  0F23  00FF               	movwf	127
  2525  0F24  3080               	movlw	128
  2526  0F25  027F               	subwf	127,w
  2527  0F26  1D03               	skipz
  2528  0F27  2F2A               	goto	u1695
  2529  0F28  303C               	movlw	60
  2530  0F29  0274               	subwf	rgb_led_control@bpm,w
  2531  0F2A                     u1695:	
  2532  0F2A  1C03               	skipc
  2533  0F2B  2F3D               	goto	l98
  2534  0F2C  0875               	movf	rgb_led_control@bpm+1,w
  2535  0F2D  3A80               	xorlw	128
  2536  0F2E  00FF               	movwf	127
  2537  0F2F  3080               	movlw	128
  2538  0F30  027F               	subwf	127,w
  2539  0F31  1D03               	skipz
  2540  0F32  2F35               	goto	u1705
  2541  0F33  3065               	movlw	101
  2542  0F34  0274               	subwf	rgb_led_control@bpm,w
  2543  0F35                     u1705:	
  2544  0F35  1803               	skipnc
  2545  0F36  2F3D               	goto	l98
  2546                           
  2547                           ;main.c: 165: PORTCbits.RC5 = 0;
  2548  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0F39  1287               	bcf	7,5	;volatile
  2551                           
  2552                           ;main.c: 166: PORTCbits.RC6 = 1;
  2553  0F3A  1707               	bsf	7,6	;volatile
  2554                           
  2555                           ;main.c: 167: PORTCbits.RC7 = 0;
  2556  0F3B  1387               	bcf	7,7	;volatile
  2557                           
  2558                           ;main.c: 168: } else {
  2559  0F3C  0008               	return
  2560  0F3D                     l98:	
  2561                           
  2562                           ;main.c: 170: PORTCbits.RC5 = 1;
  2563  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0F3F  1687               	bsf	7,5	;volatile
  2566                           
  2567                           ;main.c: 171: PORTCbits.RC6 = 0;
  2568  0F40  1307               	bcf	7,6	;volatile
  2569                           
  2570                           ;main.c: 172: PORTCbits.RC7 = 0;
  2571  0F41  1387               	bcf	7,7	;volatile
  2572  0F42  0008               	return
  2573  0F43                     __end_of_rgb_led_control:	
  2574                           
  2575                           	psect	text9
  2576  0736                     __ptext9:	
  2577 ;; *************** function _lcd_print_number *****************
  2578 ;; Defined at:
  2579 ;;		line 145 in file "supporing_cfile/lcd.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  i               2    7[BANK0 ] unsigned int 
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  p               2   13[BANK0 ] int 
  2584 ;;  k               2   11[BANK0 ] int 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2594 ;;      Params:         0       2       0       0       0
  2595 ;;      Locals:         0       4       0       0       0
  2596 ;;      Temps:          0       2       0       0       0
  2597 ;;      Totals:         0       8       0       0       0
  2598 ;;Total ram usage:        8 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    6
  2601 ;; This function calls:
  2602 ;;		___lwdiv
  2603 ;;		___lwmod
  2604 ;;		_lcd_data
  2605 ;; This function is called by:
  2606 ;;		_main
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function _lcd_print_number
  2612  0736                     _lcd_print_number:	
  2613                           
  2614                           ;lcd.c: 147: int k=0;
  2615                           
  2616                           ;incstack = 0
  2617                           ; Regs used in _lcd_print_number: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2618  0736  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0737  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0738  01AB               	clrf	lcd_print_number@k
  2621  0739  01AC               	clrf	lcd_print_number@k+1
  2622  073A                     l2424:	
  2623                           ;lcd.c: 148: while(i>0)
  2624                           
  2625  073A  0827               	movf	lcd_print_number@i,w
  2626  073B  0428               	iorwf	lcd_print_number@i+1,w
  2627  073C  1903               	btfsc	3,2
  2628  073D  2F72               	goto	l2426
  2629                           
  2630                           ;lcd.c: 149: {
  2631                           ;lcd.c: 150: num[k]=i%10;
  2632  073E  300A               	movlw	10
  2633  073F  00A0               	movwf	___lwmod@divisor
  2634  0740  3000               	movlw	0
  2635  0741  00A1               	movwf	___lwmod@divisor+1
  2636  0742  0828               	movf	lcd_print_number@i+1,w
  2637  0743  00A3               	movwf	___lwmod@dividend+1
  2638  0744  0827               	movf	lcd_print_number@i,w
  2639  0745  00A2               	movwf	___lwmod@dividend
  2640  0746  120A  158A  2743  120A  118A  	fcall	___lwmod
  2641  074B  1283               	bcf	3,5	;RP0=0, select bank0
  2642  074C  1303               	bcf	3,6	;RP1=0, select bank0
  2643  074D  082B               	movf	lcd_print_number@k,w
  2644  074E  00A9               	movwf	??_lcd_print_number
  2645  074F  0729               	addwf	??_lcd_print_number,w
  2646  0750  3EA0               	addlw	(low (_num| 0))& (0+255)
  2647  0751  0084               	movwf	4
  2648  0752  0820               	movf	?___lwmod,w
  2649  0753  1383               	bcf	3,7	;select IRP bank1
  2650  0754  0080               	movwf	0
  2651  0755  0A84               	incf	4,f
  2652  0756  0821               	movf	?___lwmod+1,w
  2653  0757  0080               	movwf	0
  2654                           
  2655                           ;lcd.c: 151: i=i/10;
  2656  0758  300A               	movlw	10
  2657  0759  00A0               	movwf	___lwdiv@divisor
  2658  075A  3000               	movlw	0
  2659  075B  00A1               	movwf	___lwdiv@divisor+1
  2660  075C  0828               	movf	lcd_print_number@i+1,w
  2661  075D  00A3               	movwf	___lwdiv@dividend+1
  2662  075E  0827               	movf	lcd_print_number@i,w
  2663  075F  00A2               	movwf	___lwdiv@dividend
  2664  0760  120A  158A  2777  120A  118A  	fcall	___lwdiv
  2665  0765  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0766  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0767  0821               	movf	?___lwdiv+1,w
  2668  0768  00A8               	movwf	lcd_print_number@i+1
  2669  0769  0820               	movf	?___lwdiv,w
  2670  076A  00A7               	movwf	lcd_print_number@i
  2671                           
  2672                           ;lcd.c: 152: k++;
  2673  076B  3001               	movlw	1
  2674  076C  07AB               	addwf	lcd_print_number@k,f
  2675  076D  1803               	skipnc
  2676  076E  0AAC               	incf	lcd_print_number@k+1,f
  2677  076F  3000               	movlw	0
  2678  0770  07AC               	addwf	lcd_print_number@k+1,f
  2679  0771  2F3A               	goto	l2424
  2680  0772                     l2426:	
  2681                           
  2682                           ;lcd.c: 153: }
  2683                           ;lcd.c: 154: k--;
  2684  0772  30FF               	movlw	255
  2685  0773  07AB               	addwf	lcd_print_number@k,f
  2686  0774  1803               	skipnc
  2687  0775  0AAC               	incf	lcd_print_number@k+1,f
  2688  0776  30FF               	movlw	255
  2689  0777  07AC               	addwf	lcd_print_number@k+1,f
  2690                           
  2691                           ;lcd.c: 155: for (p=k;p>=0;p--)
  2692  0778  082C               	movf	lcd_print_number@k+1,w
  2693  0779  00AE               	movwf	lcd_print_number@p+1
  2694  077A  082B               	movf	lcd_print_number@k,w
  2695  077B  00AD               	movwf	lcd_print_number@p
  2696  077C                     L5:	
  2697  077C  1BAE               	btfsc	lcd_print_number@p+1,7
  2698  077D  0008               	return
  2699                           
  2700                           ;lcd.c: 156: {
  2701                           ;lcd.c: 157: c=num[p]+48;
  2702  077E  082D               	movf	lcd_print_number@p,w
  2703  077F  00A9               	movwf	??_lcd_print_number
  2704  0780  0729               	addwf	??_lcd_print_number,w
  2705  0781  3EA0               	addlw	(low (_num| 0))& (0+255)
  2706  0782  0084               	movwf	4
  2707  0783  1383               	bcf	3,7	;select IRP bank1
  2708  0784  0800               	movf	0,w
  2709  0785  3E30               	addlw	48
  2710  0786  00AA               	movwf	??_lcd_print_number+1
  2711  0787  082A               	movf	??_lcd_print_number+1,w
  2712  0788  00F6               	movwf	_c
  2713                           
  2714                           ;lcd.c: 158: lcd_data(c);
  2715  0789  0876               	movf	_c,w
  2716  078A  120A  158A  2610  120A  118A  	fcall	_lcd_data
  2717  078F  30FF               	movlw	255
  2718  0790  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0791  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0792  07AD               	addwf	lcd_print_number@p,f
  2721  0793  1803               	skipnc
  2722  0794  0AAE               	incf	lcd_print_number@p+1,f
  2723  0795  30FF               	movlw	255
  2724  0796  07AE               	addwf	lcd_print_number@p+1,f
  2725  0797  2F7C               	goto	L5
  2726  0798                     __end_of_lcd_print_number:	
  2727                           ;lcd.c: 159: }
  2728                           ;lcd.c: 160: return;
  2729                           
  2730                           
  2731                           	psect	text10
  2732  0E10                     __ptext10:	
  2733 ;; *************** function _lcd_data *****************
  2734 ;; Defined at:
  2735 ;;		line 67 in file "supporing_cfile/lcd.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  a               1    wreg     unsigned char 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  a               1    6[BANK0 ] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0, pclath, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2749 ;;      Params:         0       0       0       0       0
  2750 ;;      Locals:         0       1       0       0       0
  2751 ;;      Temps:          0       0       0       0       0
  2752 ;;      Totals:         0       1       0       0       0
  2753 ;;Total ram usage:        1 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    5
  2756 ;; This function calls:
  2757 ;;		_lcd_com
  2758 ;; This function is called by:
  2759 ;;		_lcd_puts
  2760 ;;		_lcd_print_number
  2761 ;;		_hex2lcd
  2762 ;;		_LCD_ScrollMessage
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           
  2767                           ;psect for function _lcd_data
  2768  0E10                     _lcd_data:	
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _lcd_data: [wreg+status,2+status,0+pclath+cstack]
  2772                           ;lcd_data@a stored from wreg
  2773  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  2775  0E12  00A6               	movwf	lcd_data@a
  2776                           
  2777                           ;lcd.c: 69: status=1;
  2778  0E13  1479               	bsf	_status/(0+8),_status& (0+7)
  2779                           
  2780                           ;lcd.c: 70: PORTBbits.RB0=1;
  2781  0E14  1406               	bsf	6,0	;volatile
  2782                           
  2783                           ;lcd.c: 71: lcd_com(a);
  2784  0E15  0826               	movf	lcd_data@a,w
  2785  0E16  120A  158A  27B5   	fcall	_lcd_com
  2786  0E19  0008               	return
  2787  0E1A                     __end_of_lcd_data:	
  2788                           
  2789                           	psect	text11
  2790  0FB5                     __ptext11:	
  2791 ;; *************** function _lcd_com *****************
  2792 ;; Defined at:
  2793 ;;		line 40 in file "supporing_cfile/lcd.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  a               1    wreg     unsigned char 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  a               1    4[BANK0 ] unsigned char 
  2798 ;;  temp            1    5[BANK0 ] unsigned char 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, pclath, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2808 ;;      Params:         0       0       0       0       0
  2809 ;;      Locals:         0       2       0       0       0
  2810 ;;      Temps:          0       2       0       0       0
  2811 ;;      Totals:         0       4       0       0       0
  2812 ;;Total ram usage:        4 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    4
  2815 ;; This function calls:
  2816 ;;		_delay
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;;		_system_init
  2820 ;;		_lcd_data
  2821 ;;		_lcd_init
  2822 ;;		_LCD_ScrollMessage
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _lcd_com
  2828  0FB5                     _lcd_com:	
  2829                           
  2830                           ;incstack = 0
  2831                           ; Regs used in _lcd_com: [wreg+status,2+status,0+pclath+cstack]
  2832                           ;lcd_com@a stored from wreg
  2833  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2834  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2835  0FB7  00A4               	movwf	lcd_com@a
  2836                           
  2837                           ;lcd.c: 42: unsigned char temp;
  2838                           ;lcd.c: 43: if(status)
  2839  0FB8  1C79               	btfss	_status/(0+8),_status& (0+7)
  2840  0FB9  2FBC               	goto	l215
  2841                           
  2842                           ;lcd.c: 44: {
  2843                           ;lcd.c: 45: status=0;
  2844  0FBA  1079               	bcf	_status/(0+8),_status& (0+7)
  2845                           
  2846                           ;lcd.c: 46: goto next;
  2847  0FBB  2FBD               	goto	l216
  2848  0FBC                     l215:	
  2849                           
  2850                           ;lcd.c: 47: }
  2851                           ;lcd.c: 48: PORTBbits.RB0=0;
  2852  0FBC  1006               	bcf	6,0	;volatile
  2853  0FBD                     l216:	
  2854                           ;lcd.c: 49: next:
  2855                           
  2856                           
  2857                           ;lcd.c: 50: PORTBbits.RB1=0;
  2858  0FBD  1086               	bcf	6,1	;volatile
  2859                           
  2860                           ;lcd.c: 51: temp=a;
  2861  0FBE  0824               	movf	lcd_com@a,w
  2862  0FBF  00A2               	movwf	??_lcd_com
  2863  0FC0  0822               	movf	??_lcd_com,w
  2864  0FC1  00A5               	movwf	lcd_com@temp
  2865                           
  2866                           ;lcd.c: 52: temp&=0xf0;
  2867  0FC2  30F0               	movlw	240
  2868  0FC3  00A2               	movwf	??_lcd_com
  2869  0FC4  0822               	movf	??_lcd_com,w
  2870  0FC5  05A5               	andwf	lcd_com@temp,f
  2871                           
  2872                           ;lcd.c: 53: PORTB&=0x0f;
  2873  0FC6  300F               	movlw	15
  2874  0FC7  00A2               	movwf	??_lcd_com
  2875  0FC8  0822               	movf	??_lcd_com,w
  2876  0FC9  0586               	andwf	6,f	;volatile
  2877                           
  2878                           ;lcd.c: 54: PORTB|=temp;
  2879  0FCA  0825               	movf	lcd_com@temp,w
  2880  0FCB  00A2               	movwf	??_lcd_com
  2881  0FCC  0822               	movf	??_lcd_com,w
  2882  0FCD  0486               	iorwf	6,f	;volatile
  2883                           
  2884                           ;lcd.c: 55: PORTBbits.RB2=1;
  2885  0FCE  1506               	bsf	6,2	;volatile
  2886                           
  2887                           ;lcd.c: 56: delay(300);
  2888  0FCF  302C               	movlw	44
  2889  0FD0  00F4               	movwf	delay@j
  2890  0FD1  3001               	movlw	1
  2891  0FD2  00F5               	movwf	delay@j+1
  2892  0FD3  120A  158A  2665  120A  158A  	fcall	_delay
  2893                           
  2894                           ;lcd.c: 57: PORTBbits.RB2=0;
  2895  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0FDA  1106               	bcf	6,2	;volatile
  2898                           
  2899                           ;lcd.c: 58: temp=a<<4;
  2900  0FDB  0824               	movf	lcd_com@a,w
  2901  0FDC  00A2               	movwf	??_lcd_com
  2902  0FDD  3003               	movlw	3
  2903  0FDE                     u2015:	
  2904  0FDE  1003               	clrc
  2905  0FDF  0DA2               	rlf	??_lcd_com,f
  2906  0FE0  3EFF               	addlw	-1
  2907  0FE1  1D03               	skipz
  2908  0FE2  2FDE               	goto	u2015
  2909  0FE3  1003               	clrc
  2910  0FE4  0D22               	rlf	??_lcd_com,w
  2911  0FE5  00A3               	movwf	??_lcd_com+1
  2912  0FE6  0823               	movf	??_lcd_com+1,w
  2913  0FE7  00A5               	movwf	lcd_com@temp
  2914                           
  2915                           ;lcd.c: 59: temp&=0xf0;
  2916  0FE8  30F0               	movlw	240
  2917  0FE9  00A2               	movwf	??_lcd_com
  2918  0FEA  0822               	movf	??_lcd_com,w
  2919  0FEB  05A5               	andwf	lcd_com@temp,f
  2920                           
  2921                           ;lcd.c: 60: PORTB&=0x0f;
  2922  0FEC  300F               	movlw	15
  2923  0FED  00A2               	movwf	??_lcd_com
  2924  0FEE  0822               	movf	??_lcd_com,w
  2925  0FEF  0586               	andwf	6,f	;volatile
  2926                           
  2927                           ;lcd.c: 61: PORTB|=temp;
  2928  0FF0  0825               	movf	lcd_com@temp,w
  2929  0FF1  00A2               	movwf	??_lcd_com
  2930  0FF2  0822               	movf	??_lcd_com,w
  2931  0FF3  0486               	iorwf	6,f	;volatile
  2932                           
  2933                           ;lcd.c: 62: PORTBbits.RB2=1;
  2934  0FF4  1506               	bsf	6,2	;volatile
  2935                           
  2936                           ;lcd.c: 63: delay(300);
  2937  0FF5  302C               	movlw	44
  2938  0FF6  00F4               	movwf	delay@j
  2939  0FF7  3001               	movlw	1
  2940  0FF8  00F5               	movwf	delay@j+1
  2941  0FF9  120A  158A  2665   	fcall	_delay
  2942                           
  2943                           ;lcd.c: 64: PORTBbits.RB2=0;
  2944  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0FFE  1106               	bcf	6,2	;volatile
  2947  0FFF  0008               	return
  2948  1000                     __end_of_lcd_com:	
  2949                           
  2950                           	psect	text12
  2951  0E65                     __ptext12:	
  2952 ;; *************** function _delay *****************
  2953 ;; Defined at:
  2954 ;;		line 23 in file "supporing_cfile/lcd.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  j               2    4[COMMON] unsigned int 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  i               2    0[BANK0 ] unsigned int 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2968 ;;      Params:         2       0       0       0       0
  2969 ;;      Locals:         0       2       0       0       0
  2970 ;;      Temps:          0       0       0       0       0
  2971 ;;      Totals:         2       2       0       0       0
  2972 ;;Total ram usage:        4 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    3
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_lcd_init_write
  2979 ;;		_lcd_com
  2980 ;;		_lcd_init
  2981 ;;		_LCD_ScrollMessage
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _delay
  2987  0E65                     _delay:	
  2988                           
  2989                           ;lcd.c: 25: unsigned int i=0;
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _delay: [wreg+status,2]
  2993  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  2994  0E66  1303               	bcf	3,6	;RP1=0, select bank0
  2995  0E67  01A0               	clrf	delay@i
  2996  0E68  01A1               	clrf	delay@i+1
  2997                           
  2998                           ;lcd.c: 26: for(i=0;i<j;i++);
  2999  0E69  01A0               	clrf	delay@i
  3000  0E6A  01A1               	clrf	delay@i+1
  3001  0E6B                     l206:	
  3002  0E6B  0875               	movf	delay@j+1,w
  3003  0E6C  0221               	subwf	delay@i+1,w
  3004  0E6D  1D03               	skipz
  3005  0E6E  2E71               	goto	u1995
  3006  0E6F  0874               	movf	delay@j,w
  3007  0E70  0220               	subwf	delay@i,w
  3008  0E71                     u1995:	
  3009  0E71  1803               	btfsc	3,0
  3010  0E72  0008               	return
  3011  0E73  3001               	movlw	1
  3012  0E74  07A0               	addwf	delay@i,f
  3013  0E75  1803               	skipnc
  3014  0E76  0AA1               	incf	delay@i+1,f
  3015  0E77  3000               	movlw	0
  3016  0E78  07A1               	addwf	delay@i+1,f
  3017  0E79  2E6B               	goto	l206
  3018  0E7A                     __end_of_delay:	
  3019                           
  3020                           	psect	text13
  3021  0F43                     __ptext13:	
  3022 ;; *************** function ___lwmod *****************
  3023 ;; Defined at:
  3024 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  divisor         2    0[BANK0 ] unsigned int 
  3027 ;;  dividend        2    2[BANK0 ] unsigned int 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  counter         1    5[COMMON] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  2    0[BANK0 ] unsigned int 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2, status,0
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3039 ;;      Params:         0       4       0       0       0
  3040 ;;      Locals:         1       0       0       0       0
  3041 ;;      Temps:          1       0       0       0       0
  3042 ;;      Totals:         2       4       0       0       0
  3043 ;;Total ram usage:        6 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    3
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_lcd_print_number
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function ___lwmod
  3055  0F43                     ___lwmod:	
  3056                           
  3057                           ;incstack = 0
  3058                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3059  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  3060  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  3061  0F45  0820               	movf	___lwmod@divisor,w
  3062  0F46  0421               	iorwf	___lwmod@divisor+1,w
  3063  0F47  1903               	btfsc	3,2
  3064  0F48  2F72               	goto	l2270
  3065  0F49  01F5               	clrf	___lwmod@counter
  3066  0F4A  0AF5               	incf	___lwmod@counter,f
  3067  0F4B                     l2260:	
  3068  0F4B  1BA1               	btfsc	___lwmod@divisor+1,7
  3069  0F4C  2F59               	goto	l2262
  3070  0F4D  3001               	movlw	1
  3071  0F4E                     u2215:	
  3072  0F4E  1003               	clrc
  3073  0F4F  0DA0               	rlf	___lwmod@divisor,f
  3074  0F50  0DA1               	rlf	___lwmod@divisor+1,f
  3075  0F51  3EFF               	addlw	-1
  3076  0F52  1D03               	skipz
  3077  0F53  2F4E               	goto	u2215
  3078  0F54  3001               	movlw	1
  3079  0F55  00F4               	movwf	??___lwmod
  3080  0F56  0874               	movf	??___lwmod,w
  3081  0F57  07F5               	addwf	___lwmod@counter,f
  3082  0F58  2F4B               	goto	l2260
  3083  0F59                     l2262:	
  3084  0F59  0821               	movf	___lwmod@divisor+1,w
  3085  0F5A  0223               	subwf	___lwmod@dividend+1,w
  3086  0F5B  1D03               	skipz
  3087  0F5C  2F5F               	goto	u2235
  3088  0F5D  0820               	movf	___lwmod@divisor,w
  3089  0F5E  0222               	subwf	___lwmod@dividend,w
  3090  0F5F                     u2235:	
  3091  0F5F  1C03               	skipc
  3092  0F60  2F67               	goto	l2266
  3093  0F61  0820               	movf	___lwmod@divisor,w
  3094  0F62  02A2               	subwf	___lwmod@dividend,f
  3095  0F63  0821               	movf	___lwmod@divisor+1,w
  3096  0F64  1C03               	skipc
  3097  0F65  03A3               	decf	___lwmod@dividend+1,f
  3098  0F66  02A3               	subwf	___lwmod@dividend+1,f
  3099  0F67                     l2266:	
  3100  0F67  3001               	movlw	1
  3101  0F68                     u2245:	
  3102  0F68  1003               	clrc
  3103  0F69  0CA1               	rrf	___lwmod@divisor+1,f
  3104  0F6A  0CA0               	rrf	___lwmod@divisor,f
  3105  0F6B  3EFF               	addlw	-1
  3106  0F6C  1D03               	skipz
  3107  0F6D  2F68               	goto	u2245
  3108  0F6E  3001               	movlw	1
  3109  0F6F  02F5               	subwf	___lwmod@counter,f
  3110  0F70  1D03               	btfss	3,2
  3111  0F71  2F59               	goto	l2262
  3112  0F72                     l2270:	
  3113  0F72  0823               	movf	___lwmod@dividend+1,w
  3114  0F73  00A1               	movwf	?___lwmod+1
  3115  0F74  0822               	movf	___lwmod@dividend,w
  3116  0F75  00A0               	movwf	?___lwmod
  3117  0F76  0008               	return
  3118  0F77                     __end_of___lwmod:	
  3119                           
  3120                           	psect	text14
  3121  0046                     __ptext14:	
  3122 ;; *************** function _calculate_heart_beat *****************
  3123 ;; Defined at:
  3124 ;;		line 63 in file "main.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  adc_value       2   14[BANK0 ] int 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  i               2   22[BANK0 ] int 
  3129 ;;  i               2   26[BANK0 ] int 
  3130 ;;  runningTotal    2   20[BANK0 ] unsigned int 
  3131 ;;  N               2   24[BANK0 ] int 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3141 ;;      Params:         0       2       0       0       0
  3142 ;;      Locals:         0       8       0       0       0
  3143 ;;      Temps:          0       4       0       0       0
  3144 ;;      Totals:         0      14       0       0       0
  3145 ;;Total ram usage:       14 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    4
  3148 ;; This function calls:
  3149 ;;		___aldiv
  3150 ;;		___awdiv
  3151 ;;		___lwdiv
  3152 ;;		___wmul
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           
  3159                           ;psect for function _calculate_heart_beat
  3160  0046                     _calculate_heart_beat:	
  3161                           
  3162                           ;main.c: 64: Signal = adc_value;
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in _calculate_heart_beat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3166  0046  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0047  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0048  082F               	movf	calculate_heart_beat@adc_value+1,w
  3169  0049  00E5               	movwf	_Signal+1	;volatile
  3170  004A  082E               	movf	calculate_heart_beat@adc_value,w
  3171  004B  00E4               	movwf	_Signal	;volatile
  3172                           
  3173                           ;main.c: 65: sampleCounter += 2;
  3174  004C  3002               	movlw	2
  3175  004D  07E0               	addwf	_sampleCounter,f	;volatile
  3176  004E  3000               	movlw	0
  3177  004F  1803               	skipnc
  3178  0050  3001               	movlw	1
  3179  0051  07E1               	addwf	_sampleCounter+1,f	;volatile
  3180  0052  3000               	movlw	0
  3181  0053  1803               	skipnc
  3182  0054  3001               	movlw	1
  3183  0055  07E2               	addwf	_sampleCounter+2,f	;volatile
  3184  0056  3000               	movlw	0
  3185  0057  1803               	skipnc
  3186  0058  3001               	movlw	1
  3187  0059  07E3               	addwf	_sampleCounter+3,f	;volatile
  3188                           
  3189                           ;main.c: 66: int N = sampleCounter - lastBeatTime;
  3190  005A  1683               	bsf	3,5	;RP0=1, select bank1
  3191  005B  1303               	bcf	3,6	;RP1=0, select bank1
  3192  005C  095C               	comf	_lastBeatTime^(0+128),w	;volatile
  3193  005D  1283               	bcf	3,5	;RP0=0, select bank0
  3194  005E  1303               	bcf	3,6	;RP1=0, select bank0
  3195  005F  00B0               	movwf	??_calculate_heart_beat
  3196  0060  1683               	bsf	3,5	;RP0=1, select bank1
  3197  0061  1303               	bcf	3,6	;RP1=0, select bank1
  3198  0062  095D               	comf	(_lastBeatTime+1)^(0+128),w	;volatile
  3199  0063  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0064  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0065  00B1               	movwf	??_calculate_heart_beat+1
  3202  0066  0AB0               	incf	??_calculate_heart_beat,f
  3203  0067  1903               	skipnz
  3204  0068  0AB1               	incf	??_calculate_heart_beat+1,f
  3205  0069  0860               	movf	_sampleCounter,w	;volatile
  3206  006A  0730               	addwf	??_calculate_heart_beat,w
  3207  006B  00B8               	movwf	calculate_heart_beat@N
  3208  006C  0861               	movf	_sampleCounter+1,w	;volatile
  3209  006D  1803               	skipnc
  3210  006E  0A61               	incf	_sampleCounter+1,w	;volatile
  3211  006F  0731               	addwf	??_calculate_heart_beat+1,w
  3212  0070  00B9               	movwf	calculate_heart_beat@N+1
  3213                           
  3214                           ;main.c: 69: if (Signal < thresh && N > (IBI / 5) * 3) {
  3215  0071  0865               	movf	_Signal+1,w	;volatile
  3216  0072  3A80               	xorlw	128
  3217  0073  00B0               	movwf	??_calculate_heart_beat
  3218  0074  086C               	movf	_thresh+1,w	;volatile
  3219  0075  3A80               	xorlw	128
  3220  0076  0230               	subwf	??_calculate_heart_beat,w
  3221  0077  1D03               	skipz
  3222  0078  287B               	goto	u2265
  3223  0079  086B               	movf	_thresh,w	;volatile
  3224  007A  0264               	subwf	_Signal,w	;volatile
  3225  007B                     u2265:	
  3226  007B  1803               	skipnc
  3227  007C  28BD               	goto	l71
  3228  007D  3005               	movlw	5
  3229  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3230  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3231  0080  00A0               	movwf	___awdiv@divisor
  3232  0081  3000               	movlw	0
  3233  0082  00A1               	movwf	___awdiv@divisor+1
  3234  0083  086A               	movf	_IBI+1,w	;volatile
  3235  0084  00A3               	movwf	___awdiv@dividend+1
  3236  0085  0869               	movf	_IBI,w	;volatile
  3237  0086  00A2               	movwf	___awdiv@dividend
  3238  0087  120A  118A  2798  120A  118A  	fcall	___awdiv
  3239  008C  1283               	bcf	3,5	;RP0=0, select bank0
  3240  008D  1303               	bcf	3,6	;RP1=0, select bank0
  3241  008E  0821               	movf	?___awdiv+1,w
  3242  008F  00A9               	movwf	___wmul@multiplier+1
  3243  0090  0820               	movf	?___awdiv,w
  3244  0091  00A8               	movwf	___wmul@multiplier
  3245  0092  3003               	movlw	3
  3246  0093  00AA               	movwf	___wmul@multiplicand
  3247  0094  3000               	movlw	0
  3248  0095  00AB               	movwf	___wmul@multiplicand+1
  3249  0096  120A  158A  269C  120A  118A  	fcall	___wmul
  3250  009B  1283               	bcf	3,5	;RP0=0, select bank0
  3251  009C  1303               	bcf	3,6	;RP1=0, select bank0
  3252  009D  0829               	movf	?___wmul+1,w
  3253  009E  3A80               	xorlw	128
  3254  009F  00B0               	movwf	??_calculate_heart_beat
  3255  00A0  0839               	movf	calculate_heart_beat@N+1,w
  3256  00A1  3A80               	xorlw	128
  3257  00A2  0230               	subwf	??_calculate_heart_beat,w
  3258  00A3  1D03               	skipz
  3259  00A4  28A7               	goto	u2275
  3260  00A5  0838               	movf	calculate_heart_beat@N,w
  3261  00A6  0228               	subwf	?___wmul,w
  3262  00A7                     u2275:	
  3263  00A7  1803               	skipnc
  3264  00A8  28BD               	goto	l71
  3265                           
  3266                           ;main.c: 70: if (Signal < T) {
  3267  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  3268  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  3269  00AB  0865               	movf	_Signal+1,w	;volatile
  3270  00AC  3A80               	xorlw	128
  3271  00AD  00B0               	movwf	??_calculate_heart_beat
  3272  00AE  086E               	movf	_T+1,w	;volatile
  3273  00AF  3A80               	xorlw	128
  3274  00B0  0230               	subwf	??_calculate_heart_beat,w
  3275  00B1  1D03               	skipz
  3276  00B2  28B5               	goto	u2285
  3277  00B3  086D               	movf	_T,w	;volatile
  3278  00B4  0264               	subwf	_Signal,w	;volatile
  3279  00B5                     u2285:	
  3280  00B5  1803               	skipnc
  3281  00B6  28BD               	goto	l71
  3282                           
  3283                           ;main.c: 71: T = Signal;
  3284  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  3285  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  3286  00B9  0865               	movf	_Signal+1,w	;volatile
  3287  00BA  00EE               	movwf	_T+1	;volatile
  3288  00BB  0864               	movf	_Signal,w	;volatile
  3289  00BC  00ED               	movwf	_T	;volatile
  3290  00BD                     l71:	
  3291                           
  3292                           ;main.c: 72: }
  3293                           ;main.c: 73: }
  3294                           ;main.c: 75: if (Signal > thresh && Signal > P) {
  3295  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  3296  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  3297  00BF  086C               	movf	_thresh+1,w	;volatile
  3298  00C0  3A80               	xorlw	128
  3299  00C1  00B0               	movwf	??_calculate_heart_beat
  3300  00C2  0865               	movf	_Signal+1,w	;volatile
  3301  00C3  3A80               	xorlw	128
  3302  00C4  0230               	subwf	??_calculate_heart_beat,w
  3303  00C5  1D03               	skipz
  3304  00C6  28C9               	goto	u2295
  3305  00C7  0864               	movf	_Signal,w	;volatile
  3306  00C8  026B               	subwf	_thresh,w	;volatile
  3307  00C9                     u2295:	
  3308  00C9  1803               	skipnc
  3309  00CA  28E9               	goto	l2290
  3310  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  3311  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  3312  00CD  086B               	movf	(_P+1)^(0+128),w	;volatile
  3313  00CE  3A80               	xorlw	128
  3314  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  3315  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  3316  00D1  00B0               	movwf	??_calculate_heart_beat
  3317  00D2  0865               	movf	_Signal+1,w	;volatile
  3318  00D3  3A80               	xorlw	128
  3319  00D4  0230               	subwf	??_calculate_heart_beat,w
  3320  00D5  1D03               	skipz
  3321  00D6  28DB               	goto	u2305
  3322  00D7  0864               	movf	_Signal,w	;volatile
  3323  00D8  1683               	bsf	3,5	;RP0=1, select bank1
  3324  00D9  1303               	bcf	3,6	;RP1=0, select bank1
  3325  00DA  026A               	subwf	_P^(0+128),w	;volatile
  3326  00DB                     u2305:	
  3327  00DB  1803               	skipnc
  3328  00DC  28E9               	goto	l2290
  3329                           
  3330                           ;main.c: 76: P = Signal;
  3331  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  3332  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  3333  00DF  0865               	movf	_Signal+1,w	;volatile
  3334  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  3335  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  3336  00E2  00EB               	movwf	(_P+1)^(0+128)	;volatile
  3337  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  3338  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  3339  00E5  0864               	movf	_Signal,w	;volatile
  3340  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  3341  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  3342  00E8  00EA               	movwf	_P^(0+128)	;volatile
  3343  00E9                     l2290:	
  3344                           
  3345                           ;main.c: 77: }
  3346                           ;main.c: 81: if (N > 250) {
  3347  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  3348  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  3349  00EB  0839               	movf	calculate_heart_beat@N+1,w
  3350  00EC  3A80               	xorlw	128
  3351  00ED  00FF               	movwf	127
  3352  00EE  3080               	movlw	128
  3353  00EF  027F               	subwf	127,w
  3354  00F0  1D03               	skipz
  3355  00F1  28F4               	goto	u2315
  3356  00F2  30FB               	movlw	251
  3357  00F3  0238               	subwf	calculate_heart_beat@N,w
  3358  00F4                     u2315:	
  3359  00F4  1C03               	skipc
  3360  00F5  2A32               	goto	l74
  3361                           
  3362                           ;main.c: 82: if ((Signal > thresh) && (Pulse == 0) && (N > (IBI / 5) * 3)) {
  3363  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  3364  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  3365  00F8  086C               	movf	_thresh+1,w	;volatile
  3366  00F9  3A80               	xorlw	128
  3367  00FA  00B0               	movwf	??_calculate_heart_beat
  3368  00FB  0865               	movf	_Signal+1,w	;volatile
  3369  00FC  3A80               	xorlw	128
  3370  00FD  0230               	subwf	??_calculate_heart_beat,w
  3371  00FE  1D03               	skipz
  3372  00FF  2902               	goto	u2325
  3373  0100  0864               	movf	_Signal,w	;volatile
  3374  0101  026B               	subwf	_thresh,w	;volatile
  3375  0102                     u2325:	
  3376  0102  1803               	skipnc
  3377  0103  2A32               	goto	l74
  3378  0104  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0105  1303               	bcf	3,6	;RP1=0, select bank0
  3380  0106  0868               	movf	_Pulse,w	;volatile
  3381  0107  1D03               	btfss	3,2
  3382  0108  2A32               	goto	l74
  3383  0109  3005               	movlw	5
  3384  010A  00A0               	movwf	___awdiv@divisor
  3385  010B  3000               	movlw	0
  3386  010C  00A1               	movwf	___awdiv@divisor+1
  3387  010D  086A               	movf	_IBI+1,w	;volatile
  3388  010E  00A3               	movwf	___awdiv@dividend+1
  3389  010F  0869               	movf	_IBI,w	;volatile
  3390  0110  00A2               	movwf	___awdiv@dividend
  3391  0111  120A  118A  2798  120A  118A  	fcall	___awdiv
  3392  0116  1283               	bcf	3,5	;RP0=0, select bank0
  3393  0117  1303               	bcf	3,6	;RP1=0, select bank0
  3394  0118  0821               	movf	?___awdiv+1,w
  3395  0119  00A9               	movwf	___wmul@multiplier+1
  3396  011A  0820               	movf	?___awdiv,w
  3397  011B  00A8               	movwf	___wmul@multiplier
  3398  011C  3003               	movlw	3
  3399  011D  00AA               	movwf	___wmul@multiplicand
  3400  011E  3000               	movlw	0
  3401  011F  00AB               	movwf	___wmul@multiplicand+1
  3402  0120  120A  158A  269C  120A  118A  	fcall	___wmul
  3403  0125  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0126  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0127  0829               	movf	?___wmul+1,w
  3406  0128  3A80               	xorlw	128
  3407  0129  00B0               	movwf	??_calculate_heart_beat
  3408  012A  0839               	movf	calculate_heart_beat@N+1,w
  3409  012B  3A80               	xorlw	128
  3410  012C  0230               	subwf	??_calculate_heart_beat,w
  3411  012D  1D03               	skipz
  3412  012E  2931               	goto	u2345
  3413  012F  0838               	movf	calculate_heart_beat@N,w
  3414  0130  0228               	subwf	?___wmul,w
  3415  0131                     u2345:	
  3416  0131  1803               	skipnc
  3417  0132  2A32               	goto	l74
  3418                           
  3419                           ;main.c: 83: Pulse = 1;
  3420  0133  3001               	movlw	1
  3421  0134  1283               	bcf	3,5	;RP0=0, select bank0
  3422  0135  1303               	bcf	3,6	;RP1=0, select bank0
  3423  0136  00B0               	movwf	??_calculate_heart_beat
  3424  0137  0830               	movf	??_calculate_heart_beat,w
  3425  0138  00E8               	movwf	_Pulse	;volatile
  3426                           
  3427                           ;main.c: 84: IBI = sampleCounter - lastBeatTime;
  3428  0139  1683               	bsf	3,5	;RP0=1, select bank1
  3429  013A  1303               	bcf	3,6	;RP1=0, select bank1
  3430  013B  095C               	comf	_lastBeatTime^(0+128),w	;volatile
  3431  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3432  013D  1303               	bcf	3,6	;RP1=0, select bank0
  3433  013E  00B0               	movwf	??_calculate_heart_beat
  3434  013F  1683               	bsf	3,5	;RP0=1, select bank1
  3435  0140  1303               	bcf	3,6	;RP1=0, select bank1
  3436  0141  095D               	comf	(_lastBeatTime+1)^(0+128),w	;volatile
  3437  0142  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0143  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0144  00B1               	movwf	??_calculate_heart_beat+1
  3440  0145  0AB0               	incf	??_calculate_heart_beat,f
  3441  0146  1903               	skipnz
  3442  0147  0AB1               	incf	??_calculate_heart_beat+1,f
  3443  0148  0860               	movf	_sampleCounter,w	;volatile
  3444  0149  0730               	addwf	??_calculate_heart_beat,w
  3445  014A  00E9               	movwf	_IBI	;volatile
  3446  014B  0861               	movf	_sampleCounter+1,w	;volatile
  3447  014C  1803               	skipnc
  3448  014D  0A61               	incf	_sampleCounter+1,w	;volatile
  3449  014E  0731               	addwf	??_calculate_heart_beat+1,w
  3450  014F  00EA               	movwf	_IBI+1	;volatile
  3451                           
  3452                           ;main.c: 85: lastBeatTime = sampleCounter;
  3453  0150  0863               	movf	_sampleCounter+3,w	;volatile
  3454  0151  1683               	bsf	3,5	;RP0=1, select bank1
  3455  0152  1303               	bcf	3,6	;RP1=0, select bank1
  3456  0153  00DF               	movwf	(_lastBeatTime+3)^(0+128)	;volatile
  3457  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3459  0156  0862               	movf	_sampleCounter+2,w	;volatile
  3460  0157  1683               	bsf	3,5	;RP0=1, select bank1
  3461  0158  1303               	bcf	3,6	;RP1=0, select bank1
  3462  0159  00DE               	movwf	(_lastBeatTime+2)^(0+128)	;volatile
  3463  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3464  015B  1303               	bcf	3,6	;RP1=0, select bank0
  3465  015C  0861               	movf	_sampleCounter+1,w	;volatile
  3466  015D  1683               	bsf	3,5	;RP0=1, select bank1
  3467  015E  1303               	bcf	3,6	;RP1=0, select bank1
  3468  015F  00DD               	movwf	(_lastBeatTime+1)^(0+128)	;volatile
  3469  0160  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0161  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0162  0860               	movf	_sampleCounter,w	;volatile
  3472  0163  1683               	bsf	3,5	;RP0=1, select bank1
  3473  0164  1303               	bcf	3,6	;RP1=0, select bank1
  3474  0165  00DC               	movwf	_lastBeatTime^(0+128)	;volatile
  3475                           
  3476                           ;main.c: 87: if (secondBeat) {
  3477  0166  0878               	movf	_secondBeat,w	;volatile
  3478  0167  1903               	btfsc	3,2
  3479  0168  2997               	goto	l2316
  3480                           
  3481                           ;main.c: 88: secondBeat = 0;
  3482  0169  01F8               	clrf	_secondBeat	;volatile
  3483                           
  3484                           ;main.c: 89: int i;
  3485                           ;main.c: 90: for (i = 0; i <= 9; i++) {
  3486  016A  1283               	bcf	3,5	;RP0=0, select bank0
  3487  016B  1303               	bcf	3,6	;RP1=0, select bank0
  3488  016C  01B6               	clrf	calculate_heart_beat@i
  3489  016D  01B7               	clrf	calculate_heart_beat@i+1
  3490  016E  0837               	movf	calculate_heart_beat@i+1,w
  3491  016F  3A80               	xorlw	128
  3492  0170  00FF               	movwf	127
  3493  0171  3080               	movlw	128
  3494  0172  027F               	subwf	127,w
  3495  0173  1D03               	skipz
  3496  0174  2977               	goto	u2365
  3497  0175  300A               	movlw	10
  3498  0176  0236               	subwf	calculate_heart_beat@i,w
  3499  0177                     u2365:	
  3500  0177  1803               	btfsc	3,0
  3501  0178  2997               	goto	l2316
  3502  0179                     l2310:	
  3503                           
  3504                           ;main.c: 91: rate[i] = IBI;
  3505  0179  1283               	bcf	3,5	;RP0=0, select bank0
  3506  017A  1303               	bcf	3,6	;RP1=0, select bank0
  3507  017B  0836               	movf	calculate_heart_beat@i,w
  3508  017C  00B0               	movwf	??_calculate_heart_beat
  3509  017D  0730               	addwf	??_calculate_heart_beat,w
  3510  017E  3EB4               	addlw	(low (_rate| 0))& (0+255)
  3511  017F  0084               	movwf	4
  3512  0180  0869               	movf	_IBI,w	;volatile
  3513  0181  1383               	bcf	3,7	;select IRP bank1
  3514  0182  0080               	movwf	0
  3515  0183  0A84               	incf	4,f
  3516  0184  086A               	movf	_IBI+1,w	;volatile
  3517  0185  0080               	movwf	0
  3518  0186  3001               	movlw	1
  3519  0187  07B6               	addwf	calculate_heart_beat@i,f
  3520  0188  1803               	skipnc
  3521  0189  0AB7               	incf	calculate_heart_beat@i+1,f
  3522  018A  3000               	movlw	0
  3523  018B  07B7               	addwf	calculate_heart_beat@i+1,f
  3524  018C  0837               	movf	calculate_heart_beat@i+1,w
  3525  018D  3A80               	xorlw	128
  3526  018E  00FF               	movwf	127
  3527  018F  3080               	movlw	128
  3528  0190  027F               	subwf	127,w
  3529  0191  1D03               	skipz
  3530  0192  2995               	goto	u2375
  3531  0193  300A               	movlw	10
  3532  0194  0236               	subwf	calculate_heart_beat@i,w
  3533  0195                     u2375:	
  3534  0195  1C03               	skipc
  3535  0196  2979               	goto	l2310
  3536  0197                     l2316:	
  3537                           
  3538                           ;main.c: 92: }
  3539                           ;main.c: 93: }
  3540                           ;main.c: 95: if (firstBeat) {
  3541  0197  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0198  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0199  086F               	movf	_firstBeat,w	;volatile
  3544  019A  1903               	btfsc	3,2
  3545  019B  29A2               	goto	l2324
  3546                           
  3547                           ;main.c: 96: firstBeat = 0;
  3548  019C  01EF               	clrf	_firstBeat	;volatile
  3549                           
  3550                           ;main.c: 97: secondBeat = 1;
  3551  019D  3001               	movlw	1
  3552  019E  00B0               	movwf	??_calculate_heart_beat
  3553  019F  0830               	movf	??_calculate_heart_beat,w
  3554  01A0  00F8               	movwf	_secondBeat	;volatile
  3555                           
  3556                           ;main.c: 98: return;
  3557  01A1  0008               	return
  3558  01A2                     l2324:	
  3559                           
  3560                           ;main.c: 99: }
  3561                           ;main.c: 102: uint16_t runningTotal = 0;
  3562  01A2  01B4               	clrf	calculate_heart_beat@runningTotal
  3563  01A3  01B5               	clrf	calculate_heart_beat@runningTotal+1
  3564                           
  3565                           ;main.c: 103: int i;
  3566                           ;main.c: 104: for (i = 0; i <= 8; i++) {
  3567  01A4  01BA               	clrf	calculate_heart_beat@i_188
  3568  01A5  01BB               	clrf	calculate_heart_beat@i_188+1
  3569  01A6  083B               	movf	calculate_heart_beat@i_188+1,w
  3570  01A7  3A80               	xorlw	128
  3571  01A8  00FF               	movwf	127
  3572  01A9  3080               	movlw	128
  3573  01AA  027F               	subwf	127,w
  3574  01AB  1D03               	skipz
  3575  01AC  29AF               	goto	u2395
  3576  01AD  3009               	movlw	9
  3577  01AE  023A               	subwf	calculate_heart_beat@i_188,w
  3578  01AF                     u2395:	
  3579  01AF  1803               	btfsc	3,0
  3580  01B0  29EA               	goto	l2336
  3581  01B1                     l2330:	
  3582                           
  3583                           ;main.c: 105: rate[i] = rate[i + 1];
  3584  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  3585  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  3586  01B3  083A               	movf	calculate_heart_beat@i_188,w
  3587  01B4  00B0               	movwf	??_calculate_heart_beat
  3588  01B5  0730               	addwf	??_calculate_heart_beat,w
  3589  01B6  3E02               	addlw	2
  3590  01B7  3EB4               	addlw	(low (_rate| 0))& (0+255)
  3591  01B8  0084               	movwf	4
  3592  01B9  1383               	bcf	3,7	;select IRP bank1
  3593  01BA  0800               	movf	0,w
  3594  01BB  00B1               	movwf	??_calculate_heart_beat+1
  3595  01BC  0A84               	incf	4,f
  3596  01BD  0800               	movf	0,w
  3597  01BE  00B2               	movwf	??_calculate_heart_beat+2
  3598  01BF  083A               	movf	calculate_heart_beat@i_188,w
  3599  01C0  00B3               	movwf	??_calculate_heart_beat+3
  3600  01C1  0733               	addwf	??_calculate_heart_beat+3,w
  3601  01C2  3EB4               	addlw	(low (_rate| 0))& (0+255)
  3602  01C3  0084               	movwf	4
  3603  01C4  0831               	movf	??_calculate_heart_beat+1,w
  3604  01C5  0080               	movwf	0
  3605  01C6  0A84               	incf	4,f
  3606  01C7  0832               	movf	??_calculate_heart_beat+2,w
  3607  01C8  0080               	movwf	0
  3608                           
  3609                           ;main.c: 106: runningTotal += rate[i];
  3610  01C9  083A               	movf	calculate_heart_beat@i_188,w
  3611  01CA  00B0               	movwf	??_calculate_heart_beat
  3612  01CB  0730               	addwf	??_calculate_heart_beat,w
  3613  01CC  3EB4               	addlw	(low (_rate| 0))& (0+255)
  3614  01CD  0084               	movwf	4
  3615  01CE  0800               	movf	0,w
  3616  01CF  00B1               	movwf	??_calculate_heart_beat+1
  3617  01D0  0A84               	incf	4,f
  3618  01D1  0800               	movf	0,w
  3619  01D2  00B2               	movwf	??_calculate_heart_beat+2
  3620  01D3  0831               	movf	??_calculate_heart_beat+1,w
  3621  01D4  07B4               	addwf	calculate_heart_beat@runningTotal,f
  3622  01D5  1803               	skipnc
  3623  01D6  0AB5               	incf	calculate_heart_beat@runningTotal+1,f
  3624  01D7  0832               	movf	??_calculate_heart_beat+2,w
  3625  01D8  07B5               	addwf	calculate_heart_beat@runningTotal+1,f
  3626  01D9  3001               	movlw	1
  3627  01DA  07BA               	addwf	calculate_heart_beat@i_188,f
  3628  01DB  1803               	skipnc
  3629  01DC  0ABB               	incf	calculate_heart_beat@i_188+1,f
  3630  01DD  3000               	movlw	0
  3631  01DE  07BB               	addwf	calculate_heart_beat@i_188+1,f
  3632  01DF  083B               	movf	calculate_heart_beat@i_188+1,w
  3633  01E0  3A80               	xorlw	128
  3634  01E1  00FF               	movwf	127
  3635  01E2  3080               	movlw	128
  3636  01E3  027F               	subwf	127,w
  3637  01E4  1D03               	skipz
  3638  01E5  29E8               	goto	u2405
  3639  01E6  3009               	movlw	9
  3640  01E7  023A               	subwf	calculate_heart_beat@i_188,w
  3641  01E8                     u2405:	
  3642  01E8  1C03               	skipc
  3643  01E9  29B1               	goto	l2330
  3644  01EA                     l2336:	
  3645                           
  3646                           ;main.c: 107: }
  3647                           ;main.c: 109: rate[9] = IBI;
  3648  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  3649  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  3650  01EC  086A               	movf	_IBI+1,w	;volatile
  3651  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  3652  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  3653  01EF  00C7               	movwf	((_rate+1)^(0+128)+18)	;volatile
  3654  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  3655  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  3656  01F2  0869               	movf	_IBI,w	;volatile
  3657  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  3658  01F4  1303               	bcf	3,6	;RP1=0, select bank1
  3659  01F5  00C6               	movwf	(_rate^(0+128)+18)	;volatile
  3660                           
  3661                           ;main.c: 110: runningTotal += rate[9];
  3662  01F6  0846               	movf	(_rate^(0+128)+18),w	;volatile
  3663  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3664  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  3665  01F9  07B4               	addwf	calculate_heart_beat@runningTotal,f
  3666  01FA  1803               	skipnc
  3667  01FB  0AB5               	incf	calculate_heart_beat@runningTotal+1,f
  3668  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  3669  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  3670  01FE  0847               	movf	((_rate+1)^(0+128)+18),w	;volatile
  3671  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  3672  0200  1303               	bcf	3,6	;RP1=0, select bank0
  3673  0201  07B5               	addwf	calculate_heart_beat@runningTotal+1,f
  3674                           
  3675                           ;main.c: 111: runningTotal /= 10;
  3676  0202  300A               	movlw	10
  3677  0203  00A0               	movwf	___lwdiv@divisor
  3678  0204  3000               	movlw	0
  3679  0205  00A1               	movwf	___lwdiv@divisor+1
  3680  0206  0835               	movf	calculate_heart_beat@runningTotal+1,w
  3681  0207  00A3               	movwf	___lwdiv@dividend+1
  3682  0208  0834               	movf	calculate_heart_beat@runningTotal,w
  3683  0209  00A2               	movwf	___lwdiv@dividend
  3684  020A  120A  158A  2777  120A  118A  	fcall	___lwdiv
  3685  020F  1283               	bcf	3,5	;RP0=0, select bank0
  3686  0210  1303               	bcf	3,6	;RP1=0, select bank0
  3687  0211  0821               	movf	?___lwdiv+1,w
  3688  0212  00B5               	movwf	calculate_heart_beat@runningTotal+1
  3689  0213  0820               	movf	?___lwdiv,w
  3690  0214  00B4               	movwf	calculate_heart_beat@runningTotal
  3691                           
  3692                           ;main.c: 112: BPM = 60000 / runningTotal;
  3693  0215  0834               	movf	calculate_heart_beat@runningTotal,w
  3694  0216  00A0               	movwf	___aldiv@divisor
  3695  0217  0835               	movf	calculate_heart_beat@runningTotal+1,w
  3696  0218  00A1               	movwf	___aldiv@divisor+1
  3697  0219  01A2               	clrf	___aldiv@divisor+2
  3698  021A  01A3               	clrf	___aldiv@divisor+3
  3699  021B  3000               	movlw	0
  3700  021C  00A7               	movwf	___aldiv@dividend+3
  3701  021D  3000               	movlw	0
  3702  021E  00A6               	movwf	___aldiv@dividend+2
  3703  021F  30EA               	movlw	234
  3704  0220  00A5               	movwf	___aldiv@dividend+1
  3705  0221  3060               	movlw	96
  3706  0222  00A4               	movwf	___aldiv@dividend
  3707  0223  120A  118A  25D3  120A  118A  	fcall	___aldiv
  3708  0228  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0229  1303               	bcf	3,6	;RP1=0, select bank0
  3710  022A  0821               	movf	?___aldiv+1,w
  3711  022B  00E7               	movwf	_BPM+1	;volatile
  3712  022C  0820               	movf	?___aldiv,w
  3713  022D  00E6               	movwf	_BPM	;volatile
  3714                           
  3715                           ;main.c: 113: QS = 1;
  3716  022E  3001               	movlw	1
  3717  022F  00B0               	movwf	??_calculate_heart_beat
  3718  0230  0830               	movf	??_calculate_heart_beat,w
  3719  0231  00F7               	movwf	_QS	;volatile
  3720  0232                     l74:	
  3721                           
  3722                           ;main.c: 114: }
  3723                           ;main.c: 115: }
  3724                           ;main.c: 117: if (Signal < thresh && Pulse == 1) {
  3725  0232  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0233  1303               	bcf	3,6	;RP1=0, select bank0
  3727  0234  0865               	movf	_Signal+1,w	;volatile
  3728  0235  3A80               	xorlw	128
  3729  0236  00B0               	movwf	??_calculate_heart_beat
  3730  0237  086C               	movf	_thresh+1,w	;volatile
  3731  0238  3A80               	xorlw	128
  3732  0239  0230               	subwf	??_calculate_heart_beat,w
  3733  023A  1D03               	skipz
  3734  023B  2A3E               	goto	u2415
  3735  023C  086B               	movf	_thresh,w	;volatile
  3736  023D  0264               	subwf	_Signal,w	;volatile
  3737  023E                     u2415:	
  3738  023E  1803               	skipnc
  3739  023F  2A90               	goto	l2354
  3740  0240  1283               	bcf	3,5	;RP0=0, select bank0
  3741  0241  1303               	bcf	3,6	;RP1=0, select bank0
  3742  0242  0368               	decf	_Pulse,w	;volatile
  3743  0243  1D03               	btfss	3,2
  3744  0244  2A90               	goto	l2354
  3745                           
  3746                           ;main.c: 118: Pulse = 0;
  3747  0245  01E8               	clrf	_Pulse	;volatile
  3748                           
  3749                           ;main.c: 119: amp = P - T;
  3750  0246  096D               	comf	_T,w	;volatile
  3751  0247  00B0               	movwf	??_calculate_heart_beat
  3752  0248  096E               	comf	_T+1,w	;volatile
  3753  0249  00B1               	movwf	??_calculate_heart_beat+1
  3754  024A  0AB0               	incf	??_calculate_heart_beat,f
  3755  024B  1903               	skipnz
  3756  024C  0AB1               	incf	??_calculate_heart_beat+1,f
  3757  024D  1683               	bsf	3,5	;RP0=1, select bank1
  3758  024E  1303               	bcf	3,6	;RP1=0, select bank1
  3759  024F  086A               	movf	_P^(0+128),w	;volatile
  3760  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3761  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3762  0252  0730               	addwf	??_calculate_heart_beat,w
  3763  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3764  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3765  0255  00E6               	movwf	_amp^(0+128)	;volatile
  3766  0256  086B               	movf	(_P+1)^(0+128),w	;volatile
  3767  0257  1803               	skipnc
  3768  0258  0A6B               	incf	(_P+1)^(0+128),w	;volatile
  3769  0259  1283               	bcf	3,5	;RP0=0, select bank0
  3770  025A  1303               	bcf	3,6	;RP1=0, select bank0
  3771  025B  0731               	addwf	??_calculate_heart_beat+1,w
  3772  025C  1683               	bsf	3,5	;RP0=1, select bank1
  3773  025D  1303               	bcf	3,6	;RP1=0, select bank1
  3774  025E  00E7               	movwf	(_amp+1)^(0+128)	;volatile
  3775                           
  3776                           ;main.c: 120: thresh = amp / 2 + T;
  3777  025F  3002               	movlw	2
  3778  0260  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0261  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0262  00A0               	movwf	___awdiv@divisor
  3781  0263  3000               	movlw	0
  3782  0264  00A1               	movwf	___awdiv@divisor+1
  3783  0265  1683               	bsf	3,5	;RP0=1, select bank1
  3784  0266  1303               	bcf	3,6	;RP1=0, select bank1
  3785  0267  0867               	movf	(_amp+1)^(0+128),w	;volatile
  3786  0268  1283               	bcf	3,5	;RP0=0, select bank0
  3787  0269  1303               	bcf	3,6	;RP1=0, select bank0
  3788  026A  00A3               	movwf	___awdiv@dividend+1
  3789  026B  1683               	bsf	3,5	;RP0=1, select bank1
  3790  026C  1303               	bcf	3,6	;RP1=0, select bank1
  3791  026D  0866               	movf	_amp^(0+128),w	;volatile
  3792  026E  1283               	bcf	3,5	;RP0=0, select bank0
  3793  026F  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0270  00A2               	movwf	___awdiv@dividend
  3795  0271  120A  118A  2798  120A  118A  	fcall	___awdiv
  3796  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3797  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3798  0278  086D               	movf	_T,w	;volatile
  3799  0279  0720               	addwf	?___awdiv,w
  3800  027A  00EB               	movwf	_thresh	;volatile
  3801  027B  086E               	movf	_T+1,w	;volatile
  3802  027C  1803               	skipnc
  3803  027D  0A6E               	incf	_T+1,w	;volatile
  3804  027E  0721               	addwf	?___awdiv+1,w
  3805  027F  00EC               	movwf	_thresh+1	;volatile
  3806                           
  3807                           ;main.c: 121: P = thresh;
  3808  0280  086C               	movf	_thresh+1,w	;volatile
  3809  0281  1683               	bsf	3,5	;RP0=1, select bank1
  3810  0282  1303               	bcf	3,6	;RP1=0, select bank1
  3811  0283  00EB               	movwf	(_P+1)^(0+128)	;volatile
  3812  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0286  086B               	movf	_thresh,w	;volatile
  3815  0287  1683               	bsf	3,5	;RP0=1, select bank1
  3816  0288  1303               	bcf	3,6	;RP1=0, select bank1
  3817  0289  00EA               	movwf	_P^(0+128)	;volatile
  3818                           
  3819                           ;main.c: 122: T = thresh;
  3820  028A  1283               	bcf	3,5	;RP0=0, select bank0
  3821  028B  1303               	bcf	3,6	;RP1=0, select bank0
  3822  028C  086C               	movf	_thresh+1,w	;volatile
  3823  028D  00EE               	movwf	_T+1	;volatile
  3824  028E  086B               	movf	_thresh,w	;volatile
  3825  028F  00ED               	movwf	_T	;volatile
  3826  0290                     l2354:	
  3827                           
  3828                           ;main.c: 123: }
  3829                           ;main.c: 125: if (N > 2500) {
  3830  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0292  0839               	movf	calculate_heart_beat@N+1,w
  3833  0293  3A80               	xorlw	128
  3834  0294  00FF               	movwf	127
  3835  0295  3089               	movlw	137
  3836  0296  027F               	subwf	127,w
  3837  0297  1D03               	skipz
  3838  0298  2A9B               	goto	u2435
  3839  0299  30C5               	movlw	197
  3840  029A  0238               	subwf	calculate_heart_beat@N,w
  3841  029B                     u2435:	
  3842  029B  1C03               	skipc
  3843  029C  0008               	return
  3844                           
  3845                           ;main.c: 126: thresh = 530;
  3846  029D  3012               	movlw	18
  3847  029E  1283               	bcf	3,5	;RP0=0, select bank0
  3848  029F  1303               	bcf	3,6	;RP1=0, select bank0
  3849  02A0  00EB               	movwf	_thresh	;volatile
  3850  02A1  3002               	movlw	2
  3851  02A2  00EC               	movwf	_thresh+1	;volatile
  3852                           
  3853                           ;main.c: 127: P = 512;
  3854  02A3  3000               	movlw	0
  3855  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  3856  02A5  1303               	bcf	3,6	;RP1=0, select bank1
  3857  02A6  00EA               	movwf	_P^(0+128)	;volatile
  3858  02A7  3002               	movlw	2
  3859  02A8  00EB               	movwf	(_P^(0+128)+1)	;volatile
  3860                           
  3861                           ;main.c: 128: T = 512;
  3862  02A9  3000               	movlw	0
  3863  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  3864  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3865  02AC  00ED               	movwf	_T	;volatile
  3866  02AD  3002               	movlw	2
  3867  02AE  00EE               	movwf	_T+1	;volatile
  3868                           
  3869                           ;main.c: 129: lastBeatTime = sampleCounter;
  3870  02AF  0863               	movf	_sampleCounter+3,w	;volatile
  3871  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  3872  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  3873  02B2  00DF               	movwf	(_lastBeatTime+3)^(0+128)	;volatile
  3874  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  3875  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  3876  02B5  0862               	movf	_sampleCounter+2,w	;volatile
  3877  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  3878  02B7  1303               	bcf	3,6	;RP1=0, select bank1
  3879  02B8  00DE               	movwf	(_lastBeatTime+2)^(0+128)	;volatile
  3880  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3881  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3882  02BB  0861               	movf	_sampleCounter+1,w	;volatile
  3883  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  3884  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  3885  02BE  00DD               	movwf	(_lastBeatTime+1)^(0+128)	;volatile
  3886  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  3887  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  3888  02C1  0860               	movf	_sampleCounter,w	;volatile
  3889  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  3890  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  3891  02C4  00DC               	movwf	_lastBeatTime^(0+128)	;volatile
  3892                           
  3893                           ;main.c: 130: firstBeat = 1;
  3894  02C5  3001               	movlw	1
  3895  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  3896  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  3897  02C8  00B0               	movwf	??_calculate_heart_beat
  3898  02C9  0830               	movf	??_calculate_heart_beat,w
  3899  02CA  00EF               	movwf	_firstBeat	;volatile
  3900                           
  3901                           ;main.c: 131: secondBeat = 0;
  3902  02CB  01F8               	clrf	_secondBeat	;volatile
  3903  02CC  0008               	return
  3904  02CD                     __end_of_calculate_heart_beat:	
  3905                           
  3906                           	psect	text15
  3907  0E9C                     __ptext15:	
  3908 ;; *************** function ___wmul *****************
  3909 ;; Defined at:
  3910 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  multiplier      2    8[BANK0 ] unsigned int 
  3913 ;;  multiplicand    2   10[BANK0 ] unsigned int 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  product         2   12[BANK0 ] unsigned int 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  2    8[BANK0 ] unsigned int 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3925 ;;      Params:         0       4       0       0       0
  3926 ;;      Locals:         0       2       0       0       0
  3927 ;;      Temps:          0       0       0       0       0
  3928 ;;      Totals:         0       6       0       0       0
  3929 ;;Total ram usage:        6 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    3
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_calculate_heart_beat
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function ___wmul
  3941  0E9C                     ___wmul:	
  3942                           
  3943                           ;incstack = 0
  3944                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3945  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0E9E  01AC               	clrf	___wmul@product
  3948  0E9F  01AD               	clrf	___wmul@product+1
  3949  0EA0                     l1540:	
  3950  0EA0  1C28               	btfss	___wmul@multiplier,0
  3951  0EA1  2EA8               	goto	l396
  3952  0EA2  082A               	movf	___wmul@multiplicand,w
  3953  0EA3  07AC               	addwf	___wmul@product,f
  3954  0EA4  1803               	skipnc
  3955  0EA5  0AAD               	incf	___wmul@product+1,f
  3956  0EA6  082B               	movf	___wmul@multiplicand+1,w
  3957  0EA7  07AD               	addwf	___wmul@product+1,f
  3958  0EA8                     l396:	
  3959  0EA8  3001               	movlw	1
  3960  0EA9                     u1095:	
  3961  0EA9  1003               	clrc
  3962  0EAA  0DAA               	rlf	___wmul@multiplicand,f
  3963  0EAB  0DAB               	rlf	___wmul@multiplicand+1,f
  3964  0EAC  3EFF               	addlw	-1
  3965  0EAD  1D03               	skipz
  3966  0EAE  2EA9               	goto	u1095
  3967  0EAF  3001               	movlw	1
  3968  0EB0                     u1105:	
  3969  0EB0  1003               	clrc
  3970  0EB1  0CA9               	rrf	___wmul@multiplier+1,f
  3971  0EB2  0CA8               	rrf	___wmul@multiplier,f
  3972  0EB3  3EFF               	addlw	-1
  3973  0EB4  1D03               	skipz
  3974  0EB5  2EB0               	goto	u1105
  3975  0EB6  0828               	movf	___wmul@multiplier,w
  3976  0EB7  0429               	iorwf	___wmul@multiplier+1,w
  3977  0EB8  1D03               	btfss	3,2
  3978  0EB9  2EA0               	goto	l1540
  3979  0EBA  082D               	movf	___wmul@product+1,w
  3980  0EBB  00A9               	movwf	?___wmul+1
  3981  0EBC  082C               	movf	___wmul@product,w
  3982  0EBD  00A8               	movwf	?___wmul
  3983  0EBE  0008               	return
  3984  0EBF                     __end_of___wmul:	
  3985                           
  3986                           	psect	text16
  3987  0F77                     __ptext16:	
  3988 ;; *************** function ___lwdiv *****************
  3989 ;; Defined at:
  3990 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  divisor         2    0[BANK0 ] unsigned int 
  3993 ;;  dividend        2    2[BANK0 ] unsigned int 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  quotient        2    5[BANK0 ] unsigned int 
  3996 ;;  counter         1    4[BANK0 ] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  2    0[BANK0 ] unsigned int 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4006 ;;      Params:         0       4       0       0       0
  4007 ;;      Locals:         0       3       0       0       0
  4008 ;;      Temps:          1       0       0       0       0
  4009 ;;      Totals:         1       7       0       0       0
  4010 ;;Total ram usage:        8 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    3
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_calculate_heart_beat
  4017 ;;		_lcd_print_number
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function ___lwdiv
  4023  0F77                     ___lwdiv:	
  4024                           
  4025                           ;incstack = 0
  4026                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4027  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  4029  0F79  01A5               	clrf	___lwdiv@quotient
  4030  0F7A  01A6               	clrf	___lwdiv@quotient+1
  4031  0F7B  0820               	movf	___lwdiv@divisor,w
  4032  0F7C  0421               	iorwf	___lwdiv@divisor+1,w
  4033  0F7D  1903               	btfsc	3,2
  4034  0F7E  2FB0               	goto	l2248
  4035  0F7F  01A4               	clrf	___lwdiv@counter
  4036  0F80  0AA4               	incf	___lwdiv@counter,f
  4037  0F81                     l2236:	
  4038  0F81  1BA1               	btfsc	___lwdiv@divisor+1,7
  4039  0F82  2F8F               	goto	l2238
  4040  0F83  3001               	movlw	1
  4041  0F84                     u2145:	
  4042  0F84  1003               	clrc
  4043  0F85  0DA0               	rlf	___lwdiv@divisor,f
  4044  0F86  0DA1               	rlf	___lwdiv@divisor+1,f
  4045  0F87  3EFF               	addlw	-1
  4046  0F88  1D03               	skipz
  4047  0F89  2F84               	goto	u2145
  4048  0F8A  3001               	movlw	1
  4049  0F8B  00F4               	movwf	??___lwdiv
  4050  0F8C  0874               	movf	??___lwdiv,w
  4051  0F8D  07A4               	addwf	___lwdiv@counter,f
  4052  0F8E  2F81               	goto	l2236
  4053  0F8F                     l2238:	
  4054  0F8F  3001               	movlw	1
  4055  0F90                     u2165:	
  4056  0F90  1003               	clrc
  4057  0F91  0DA5               	rlf	___lwdiv@quotient,f
  4058  0F92  0DA6               	rlf	___lwdiv@quotient+1,f
  4059  0F93  3EFF               	addlw	-1
  4060  0F94  1D03               	skipz
  4061  0F95  2F90               	goto	u2165
  4062  0F96  0821               	movf	___lwdiv@divisor+1,w
  4063  0F97  0223               	subwf	___lwdiv@dividend+1,w
  4064  0F98  1D03               	skipz
  4065  0F99  2F9C               	goto	u2175
  4066  0F9A  0820               	movf	___lwdiv@divisor,w
  4067  0F9B  0222               	subwf	___lwdiv@dividend,w
  4068  0F9C                     u2175:	
  4069  0F9C  1C03               	skipc
  4070  0F9D  2FA5               	goto	l2244
  4071  0F9E  0820               	movf	___lwdiv@divisor,w
  4072  0F9F  02A2               	subwf	___lwdiv@dividend,f
  4073  0FA0  0821               	movf	___lwdiv@divisor+1,w
  4074  0FA1  1C03               	skipc
  4075  0FA2  03A3               	decf	___lwdiv@dividend+1,f
  4076  0FA3  02A3               	subwf	___lwdiv@dividend+1,f
  4077  0FA4  1425               	bsf	___lwdiv@quotient,0
  4078  0FA5                     l2244:	
  4079  0FA5  3001               	movlw	1
  4080  0FA6                     u2185:	
  4081  0FA6  1003               	clrc
  4082  0FA7  0CA1               	rrf	___lwdiv@divisor+1,f
  4083  0FA8  0CA0               	rrf	___lwdiv@divisor,f
  4084  0FA9  3EFF               	addlw	-1
  4085  0FAA  1D03               	skipz
  4086  0FAB  2FA6               	goto	u2185
  4087  0FAC  3001               	movlw	1
  4088  0FAD  02A4               	subwf	___lwdiv@counter,f
  4089  0FAE  1D03               	btfss	3,2
  4090  0FAF  2F8F               	goto	l2238
  4091  0FB0                     l2248:	
  4092  0FB0  0826               	movf	___lwdiv@quotient+1,w
  4093  0FB1  00A1               	movwf	?___lwdiv+1
  4094  0FB2  0825               	movf	___lwdiv@quotient,w
  4095  0FB3  00A0               	movwf	?___lwdiv
  4096  0FB4  0008               	return
  4097  0FB5                     __end_of___lwdiv:	
  4098                           
  4099                           	psect	text17
  4100  0798                     __ptext17:	
  4101 ;; *************** function ___awdiv *****************
  4102 ;; Defined at:
  4103 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  divisor         2    0[BANK0 ] int 
  4106 ;;  dividend        2    2[BANK0 ] int 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  quotient        2    6[BANK0 ] int 
  4109 ;;  sign            1    5[BANK0 ] unsigned char 
  4110 ;;  counter         1    4[BANK0 ] unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  2    0[BANK0 ] int 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4120 ;;      Params:         0       4       0       0       0
  4121 ;;      Locals:         0       4       0       0       0
  4122 ;;      Temps:          1       0       0       0       0
  4123 ;;      Totals:         1       8       0       0       0
  4124 ;;Total ram usage:        9 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    3
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_calculate_heart_beat
  4131 ;;		_main
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function ___awdiv
  4137  0798                     ___awdiv:	
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4141  0798  1283               	bcf	3,5	;RP0=0, select bank0
  4142  0799  1303               	bcf	3,6	;RP1=0, select bank0
  4143  079A  01A5               	clrf	___awdiv@sign
  4144  079B  1FA1               	btfss	___awdiv@divisor+1,7
  4145  079C  2FA4               	goto	l2190
  4146  079D  09A0               	comf	___awdiv@divisor,f
  4147  079E  09A1               	comf	___awdiv@divisor+1,f
  4148  079F  0AA0               	incf	___awdiv@divisor,f
  4149  07A0  1903               	skipnz
  4150  07A1  0AA1               	incf	___awdiv@divisor+1,f
  4151  07A2  01A5               	clrf	___awdiv@sign
  4152  07A3  0AA5               	incf	___awdiv@sign,f
  4153  07A4                     l2190:	
  4154  07A4  1FA3               	btfss	___awdiv@dividend+1,7
  4155  07A5  2FAF               	goto	l2196
  4156  07A6  09A2               	comf	___awdiv@dividend,f
  4157  07A7  09A3               	comf	___awdiv@dividend+1,f
  4158  07A8  0AA2               	incf	___awdiv@dividend,f
  4159  07A9  1903               	skipnz
  4160  07AA  0AA3               	incf	___awdiv@dividend+1,f
  4161  07AB  3001               	movlw	1
  4162  07AC  00F4               	movwf	??___awdiv
  4163  07AD  0874               	movf	??___awdiv,w
  4164  07AE  06A5               	xorwf	___awdiv@sign,f
  4165  07AF                     l2196:	
  4166  07AF  01A6               	clrf	___awdiv@quotient
  4167  07B0  01A7               	clrf	___awdiv@quotient+1
  4168  07B1  0820               	movf	___awdiv@divisor,w
  4169  07B2  0421               	iorwf	___awdiv@divisor+1,w
  4170  07B3  1903               	btfsc	3,2
  4171  07B4  2FE6               	goto	l2218
  4172  07B5  01A4               	clrf	___awdiv@counter
  4173  07B6  0AA4               	incf	___awdiv@counter,f
  4174  07B7                     l2206:	
  4175  07B7  1BA1               	btfsc	___awdiv@divisor+1,7
  4176  07B8  2FC5               	goto	l2208
  4177  07B9  3001               	movlw	1
  4178  07BA                     u2065:	
  4179  07BA  1003               	clrc
  4180  07BB  0DA0               	rlf	___awdiv@divisor,f
  4181  07BC  0DA1               	rlf	___awdiv@divisor+1,f
  4182  07BD  3EFF               	addlw	-1
  4183  07BE  1D03               	skipz
  4184  07BF  2FBA               	goto	u2065
  4185  07C0  3001               	movlw	1
  4186  07C1  00F4               	movwf	??___awdiv
  4187  07C2  0874               	movf	??___awdiv,w
  4188  07C3  07A4               	addwf	___awdiv@counter,f
  4189  07C4  2FB7               	goto	l2206
  4190  07C5                     l2208:	
  4191  07C5  3001               	movlw	1
  4192  07C6                     u2085:	
  4193  07C6  1003               	clrc
  4194  07C7  0DA6               	rlf	___awdiv@quotient,f
  4195  07C8  0DA7               	rlf	___awdiv@quotient+1,f
  4196  07C9  3EFF               	addlw	-1
  4197  07CA  1D03               	skipz
  4198  07CB  2FC6               	goto	u2085
  4199  07CC  0821               	movf	___awdiv@divisor+1,w
  4200  07CD  0223               	subwf	___awdiv@dividend+1,w
  4201  07CE  1D03               	skipz
  4202  07CF  2FD2               	goto	u2095
  4203  07D0  0820               	movf	___awdiv@divisor,w
  4204  07D1  0222               	subwf	___awdiv@dividend,w
  4205  07D2                     u2095:	
  4206  07D2  1C03               	skipc
  4207  07D3  2FDB               	goto	l2214
  4208  07D4  0820               	movf	___awdiv@divisor,w
  4209  07D5  02A2               	subwf	___awdiv@dividend,f
  4210  07D6  0821               	movf	___awdiv@divisor+1,w
  4211  07D7  1C03               	skipc
  4212  07D8  03A3               	decf	___awdiv@dividend+1,f
  4213  07D9  02A3               	subwf	___awdiv@dividend+1,f
  4214  07DA  1426               	bsf	___awdiv@quotient,0
  4215  07DB                     l2214:	
  4216  07DB  3001               	movlw	1
  4217  07DC                     u2105:	
  4218  07DC  1003               	clrc
  4219  07DD  0CA1               	rrf	___awdiv@divisor+1,f
  4220  07DE  0CA0               	rrf	___awdiv@divisor,f
  4221  07DF  3EFF               	addlw	-1
  4222  07E0  1D03               	skipz
  4223  07E1  2FDC               	goto	u2105
  4224  07E2  3001               	movlw	1
  4225  07E3  02A4               	subwf	___awdiv@counter,f
  4226  07E4  1D03               	btfss	3,2
  4227  07E5  2FC5               	goto	l2208
  4228  07E6                     l2218:	
  4229  07E6  0825               	movf	___awdiv@sign,w
  4230  07E7  1903               	btfsc	3,2
  4231  07E8  2FEE               	goto	l2222
  4232  07E9  09A6               	comf	___awdiv@quotient,f
  4233  07EA  09A7               	comf	___awdiv@quotient+1,f
  4234  07EB  0AA6               	incf	___awdiv@quotient,f
  4235  07EC  1903               	skipnz
  4236  07ED  0AA7               	incf	___awdiv@quotient+1,f
  4237  07EE                     l2222:	
  4238  07EE  0827               	movf	___awdiv@quotient+1,w
  4239  07EF  00A1               	movwf	?___awdiv+1
  4240  07F0  0826               	movf	___awdiv@quotient,w
  4241  07F1  00A0               	movwf	?___awdiv
  4242  07F2  0008               	return
  4243  07F3                     __end_of___awdiv:	
  4244                           
  4245                           	psect	text18
  4246  05D3                     __ptext18:	
  4247 ;; *************** function ___aldiv *****************
  4248 ;; Defined at:
  4249 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  divisor         4    0[BANK0 ] long 
  4252 ;;  dividend        4    4[BANK0 ] long 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  quotient        4   10[BANK0 ] long 
  4255 ;;  sign            1    9[BANK0 ] unsigned char 
  4256 ;;  counter         1    8[BANK0 ] unsigned char 
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  4    0[BANK0 ] long 
  4259 ;; Registers used:
  4260 ;;		wreg, status,2, status,0
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4266 ;;      Params:         0       8       0       0       0
  4267 ;;      Locals:         0       6       0       0       0
  4268 ;;      Temps:          1       0       0       0       0
  4269 ;;      Totals:         1      14       0       0       0
  4270 ;;Total ram usage:       15 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; Hardware stack levels required when called:    3
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_calculate_heart_beat
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function ___aldiv
  4282  05D3                     ___aldiv:	
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4286  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  4287  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  4288  05D5  01A9               	clrf	___aldiv@sign
  4289  05D6  1FA3               	btfss	___aldiv@divisor+3,7
  4290  05D7  2DE5               	goto	l451
  4291  05D8  09A0               	comf	___aldiv@divisor,f
  4292  05D9  09A1               	comf	___aldiv@divisor+1,f
  4293  05DA  09A2               	comf	___aldiv@divisor+2,f
  4294  05DB  09A3               	comf	___aldiv@divisor+3,f
  4295  05DC  0AA0               	incf	___aldiv@divisor,f
  4296  05DD  1903               	skipnz
  4297  05DE  0AA1               	incf	___aldiv@divisor+1,f
  4298  05DF  1903               	skipnz
  4299  05E0  0AA2               	incf	___aldiv@divisor+2,f
  4300  05E1  1903               	skipnz
  4301  05E2  0AA3               	incf	___aldiv@divisor+3,f
  4302  05E3  01A9               	clrf	___aldiv@sign
  4303  05E4  0AA9               	incf	___aldiv@sign,f
  4304  05E5                     l451:	
  4305  05E5  1FA7               	btfss	___aldiv@dividend+3,7
  4306  05E6  2DF6               	goto	l1562
  4307  05E7  09A4               	comf	___aldiv@dividend,f
  4308  05E8  09A5               	comf	___aldiv@dividend+1,f
  4309  05E9  09A6               	comf	___aldiv@dividend+2,f
  4310  05EA  09A7               	comf	___aldiv@dividend+3,f
  4311  05EB  0AA4               	incf	___aldiv@dividend,f
  4312  05EC  1903               	skipnz
  4313  05ED  0AA5               	incf	___aldiv@dividend+1,f
  4314  05EE  1903               	skipnz
  4315  05EF  0AA6               	incf	___aldiv@dividend+2,f
  4316  05F0  1903               	skipnz
  4317  05F1  0AA7               	incf	___aldiv@dividend+3,f
  4318  05F2  3001               	movlw	1
  4319  05F3  00F4               	movwf	??___aldiv
  4320  05F4  0874               	movf	??___aldiv,w
  4321  05F5  06A9               	xorwf	___aldiv@sign,f
  4322  05F6                     l1562:	
  4323  05F6  3000               	movlw	0
  4324  05F7  00AD               	movwf	___aldiv@quotient+3
  4325  05F8  3000               	movlw	0
  4326  05F9  00AC               	movwf	___aldiv@quotient+2
  4327  05FA  3000               	movlw	0
  4328  05FB  00AB               	movwf	___aldiv@quotient+1
  4329  05FC  3000               	movlw	0
  4330  05FD  00AA               	movwf	___aldiv@quotient
  4331  05FE  0823               	movf	___aldiv@divisor+3,w
  4332  05FF  0422               	iorwf	___aldiv@divisor+2,w
  4333  0600  0421               	iorwf	___aldiv@divisor+1,w
  4334  0601  0420               	iorwf	___aldiv@divisor,w
  4335  0602  1903               	skipnz
  4336  0603  2E4B               	goto	l1584
  4337  0604  01A8               	clrf	___aldiv@counter
  4338  0605  0AA8               	incf	___aldiv@counter,f
  4339  0606                     l1570:	
  4340  0606  1BA3               	btfsc	___aldiv@divisor+3,7
  4341  0607  2E16               	goto	l1572
  4342  0608  3001               	movlw	1
  4343  0609  00F4               	movwf	??___aldiv
  4344  060A                     u1155:	
  4345  060A  1003               	clrc
  4346  060B  0DA0               	rlf	___aldiv@divisor,f
  4347  060C  0DA1               	rlf	___aldiv@divisor+1,f
  4348  060D  0DA2               	rlf	___aldiv@divisor+2,f
  4349  060E  0DA3               	rlf	___aldiv@divisor+3,f
  4350  060F  0BF4               	decfsz	??___aldiv,f
  4351  0610  2E0A               	goto	u1155
  4352  0611  3001               	movlw	1
  4353  0612  00F4               	movwf	??___aldiv
  4354  0613  0874               	movf	??___aldiv,w
  4355  0614  07A8               	addwf	___aldiv@counter,f
  4356  0615  2E06               	goto	l1570
  4357  0616                     l1572:	
  4358  0616  3001               	movlw	1
  4359  0617  00F4               	movwf	??___aldiv
  4360  0618                     u1175:	
  4361  0618  1003               	clrc
  4362  0619  0DAA               	rlf	___aldiv@quotient,f
  4363  061A  0DAB               	rlf	___aldiv@quotient+1,f
  4364  061B  0DAC               	rlf	___aldiv@quotient+2,f
  4365  061C  0DAD               	rlf	___aldiv@quotient+3,f
  4366  061D  0BF4               	decfsz	??___aldiv,f
  4367  061E  2E18               	goto	u1175
  4368  061F  0823               	movf	___aldiv@divisor+3,w
  4369  0620  0227               	subwf	___aldiv@dividend+3,w
  4370  0621  1D03               	skipz
  4371  0622  2E2D               	goto	u1185
  4372  0623  0822               	movf	___aldiv@divisor+2,w
  4373  0624  0226               	subwf	___aldiv@dividend+2,w
  4374  0625  1D03               	skipz
  4375  0626  2E2D               	goto	u1185
  4376  0627  0821               	movf	___aldiv@divisor+1,w
  4377  0628  0225               	subwf	___aldiv@dividend+1,w
  4378  0629  1D03               	skipz
  4379  062A  2E2D               	goto	u1185
  4380  062B  0820               	movf	___aldiv@divisor,w
  4381  062C  0224               	subwf	___aldiv@dividend,w
  4382  062D                     u1185:	
  4383  062D  1C03               	skipc
  4384  062E  2E3E               	goto	l1580
  4385  062F  0820               	movf	___aldiv@divisor,w
  4386  0630  02A4               	subwf	___aldiv@dividend,f
  4387  0631  0821               	movf	___aldiv@divisor+1,w
  4388  0632  1C03               	skipc
  4389  0633  0F21               	incfsz	___aldiv@divisor+1,w
  4390  0634  02A5               	subwf	___aldiv@dividend+1,f
  4391  0635  0822               	movf	___aldiv@divisor+2,w
  4392  0636  1C03               	skipc
  4393  0637  0F22               	incfsz	___aldiv@divisor+2,w
  4394  0638  02A6               	subwf	___aldiv@dividend+2,f
  4395  0639  0823               	movf	___aldiv@divisor+3,w
  4396  063A  1C03               	skipc
  4397  063B  0F23               	incfsz	___aldiv@divisor+3,w
  4398  063C  02A7               	subwf	___aldiv@dividend+3,f
  4399  063D  142A               	bsf	___aldiv@quotient,0
  4400  063E                     l1580:	
  4401  063E  3001               	movlw	1
  4402  063F                     u1195:	
  4403  063F  1003               	clrc
  4404  0640  0CA3               	rrf	___aldiv@divisor+3,f
  4405  0641  0CA2               	rrf	___aldiv@divisor+2,f
  4406  0642  0CA1               	rrf	___aldiv@divisor+1,f
  4407  0643  0CA0               	rrf	___aldiv@divisor,f
  4408  0644  3EFF               	addlw	-1
  4409  0645  1D03               	skipz
  4410  0646  2E3F               	goto	u1195
  4411  0647  3001               	movlw	1
  4412  0648  02A8               	subwf	___aldiv@counter,f
  4413  0649  1D03               	btfss	3,2
  4414  064A  2E16               	goto	l1572
  4415  064B                     l1584:	
  4416  064B  0829               	movf	___aldiv@sign,w
  4417  064C  1903               	btfsc	3,2
  4418  064D  2E59               	goto	l1588
  4419  064E  09AA               	comf	___aldiv@quotient,f
  4420  064F  09AB               	comf	___aldiv@quotient+1,f
  4421  0650  09AC               	comf	___aldiv@quotient+2,f
  4422  0651  09AD               	comf	___aldiv@quotient+3,f
  4423  0652  0AAA               	incf	___aldiv@quotient,f
  4424  0653  1903               	skipnz
  4425  0654  0AAB               	incf	___aldiv@quotient+1,f
  4426  0655  1903               	skipnz
  4427  0656  0AAC               	incf	___aldiv@quotient+2,f
  4428  0657  1903               	skipnz
  4429  0658  0AAD               	incf	___aldiv@quotient+3,f
  4430  0659                     l1588:	
  4431  0659  082D               	movf	___aldiv@quotient+3,w
  4432  065A  00A3               	movwf	?___aldiv+3
  4433  065B  082C               	movf	___aldiv@quotient+2,w
  4434  065C  00A2               	movwf	?___aldiv+2
  4435  065D  082B               	movf	___aldiv@quotient+1,w
  4436  065E  00A1               	movwf	?___aldiv+1
  4437  065F  082A               	movf	___aldiv@quotient,w
  4438  0660  00A0               	movwf	?___aldiv
  4439  0661  0008               	return
  4440  0662                     __end_of___aldiv:	
  4441                           
  4442                           	psect	text19
  4443  06D2                     __ptext19:	
  4444 ;; *************** function _buzzer_control *****************
  4445 ;; Defined at:
  4446 ;;		line 135 in file "main.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  is_high         1    wreg     unsigned char 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  is_high         1    0[BANK0 ] unsigned char 
  4451 ;;  i               2    3[BANK0 ] int 
  4452 ;;  i               2    1[BANK0 ] int 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, btemp+1
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4462 ;;      Params:         0       0       0       0       0
  4463 ;;      Locals:         0       5       0       0       0
  4464 ;;      Temps:          2       0       0       0       0
  4465 ;;      Totals:         2       5       0       0       0
  4466 ;;Total ram usage:        7 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    3
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _buzzer_control
  4478  06D2                     _buzzer_control:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _buzzer_control: [wreg+status,2+status,0+btemp+1]
  4482                           ;buzzer_control@is_high stored from wreg
  4483  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  4484  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  4485  06D4  00A0               	movwf	buzzer_control@is_high
  4486                           
  4487                           ;main.c: 136: if (is_high) {
  4488  06D5  0820               	movf	buzzer_control@is_high,w
  4489  06D6  1903               	btfsc	3,2
  4490  06D7  2F06               	goto	l1784
  4491                           
  4492                           ;main.c: 139: for (int i = 0; i < 100; i++) {
  4493  06D8  01A1               	clrf	buzzer_control@i
  4494  06D9  01A2               	clrf	buzzer_control@i+1
  4495  06DA                     L6:	
  4496  06DA  0822               	movf	buzzer_control@i+1,w
  4497  06DB  3A80               	xorlw	128
  4498  06DC  00FF               	movwf	127
  4499  06DD  3080               	movlw	128
  4500  06DE  027F               	subwf	127,w
  4501  06DF  1D03               	skipz
  4502  06E0  2EE3               	goto	u1645
  4503  06E1  3064               	movlw	100
  4504  06E2  0221               	subwf	buzzer_control@i,w
  4505  06E3                     u1645:	
  4506  06E3  1803               	btfsc	3,0
  4507  06E4  0008               	return
  4508                           
  4509                           ;main.c: 140: RB3 = 1;
  4510  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  4511  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  4512  06E7  1586               	bsf	6,3	;volatile
  4513                           
  4514                           ;main.c: 141: _delay((unsigned long)((1000)*(16000000/4000000.0)));
  4515  06E8  3006               	movlw	6
  4516  06E9  00F5               	movwf	??_buzzer_control+1
  4517  06EA  3030               	movlw	48
  4518  06EB  00F4               	movwf	??_buzzer_control
  4519  06EC                     u2787:	
  4520  06EC  0BF4               	decfsz	??_buzzer_control,f
  4521  06ED  2EEC               	goto	u2787
  4522  06EE  0BF5               	decfsz	??_buzzer_control+1,f
  4523  06EF  2EEC               	goto	u2787
  4524  06F0  0000               	nop
  4525                           
  4526                           ;main.c: 142: RB3 = 0;
  4527  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  4528  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  4529  06F3  1186               	bcf	6,3	;volatile
  4530                           
  4531                           ;main.c: 143: _delay((unsigned long)((1000)*(16000000/4000000.0)));
  4532  06F4  3006               	movlw	6
  4533  06F5  00F5               	movwf	??_buzzer_control+1
  4534  06F6  3030               	movlw	48
  4535  06F7  00F4               	movwf	??_buzzer_control
  4536  06F8                     u2797:	
  4537  06F8  0BF4               	decfsz	??_buzzer_control,f
  4538  06F9  2EF8               	goto	u2797
  4539  06FA  0BF5               	decfsz	??_buzzer_control+1,f
  4540  06FB  2EF8               	goto	u2797
  4541  06FC  0000               	nop
  4542  06FD  3001               	movlw	1
  4543  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  4544  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  4545  0700  07A1               	addwf	buzzer_control@i,f
  4546  0701  1803               	skipnc
  4547  0702  0AA2               	incf	buzzer_control@i+1,f
  4548  0703  3000               	movlw	0
  4549  0704  07A2               	addwf	buzzer_control@i+1,f
  4550  0705  2EDA               	goto	L6
  4551  0706                     l1784:	
  4552                           ;main.c: 144: }
  4553                           ;main.c: 145: } else {
  4554                           
  4555                           
  4556                           ;main.c: 148: for (int i = 0; i < 100; i++) {
  4557  0706  1283               	bcf	3,5	;RP0=0, select bank0
  4558  0707  1303               	bcf	3,6	;RP1=0, select bank0
  4559  0708  01A3               	clrf	buzzer_control@i_192
  4560  0709  01A4               	clrf	buzzer_control@i_192+1
  4561  070A                     L7:	
  4562  070A  0824               	movf	buzzer_control@i_192+1,w
  4563  070B  3A80               	xorlw	128
  4564  070C  00FF               	movwf	127
  4565  070D  3080               	movlw	128
  4566  070E  027F               	subwf	127,w
  4567  070F  1D03               	skipz
  4568  0710  2F13               	goto	u1665
  4569  0711  3064               	movlw	100
  4570  0712  0223               	subwf	buzzer_control@i_192,w
  4571  0713                     u1665:	
  4572  0713  1803               	btfsc	3,0
  4573  0714  0008               	return
  4574                           
  4575                           ;main.c: 149: RB3 = 1;
  4576  0715  1283               	bcf	3,5	;RP0=0, select bank0
  4577  0716  1303               	bcf	3,6	;RP1=0, select bank0
  4578  0717  1586               	bsf	6,3	;volatile
  4579                           
  4580                           ;main.c: 150: _delay((unsigned long)((500)*(16000000/4000000.0)));
  4581  0718  3003               	movlw	3
  4582  0719  00F5               	movwf	??_buzzer_control+1
  4583  071A  3097               	movlw	151
  4584  071B  00F4               	movwf	??_buzzer_control
  4585  071C                     u2807:	
  4586  071C  0BF4               	decfsz	??_buzzer_control,f
  4587  071D  2F1C               	goto	u2807
  4588  071E  0BF5               	decfsz	??_buzzer_control+1,f
  4589  071F  2F1C               	goto	u2807
  4590  0720  2F21               	nop2
  4591                           
  4592                           ;main.c: 151: RB3 = 0;
  4593  0721  1283               	bcf	3,5	;RP0=0, select bank0
  4594  0722  1303               	bcf	3,6	;RP1=0, select bank0
  4595  0723  1186               	bcf	6,3	;volatile
  4596                           
  4597                           ;main.c: 152: _delay((unsigned long)((500)*(16000000/4000000.0)));
  4598  0724  3003               	movlw	3
  4599  0725  00F5               	movwf	??_buzzer_control+1
  4600  0726  3097               	movlw	151
  4601  0727  00F4               	movwf	??_buzzer_control
  4602  0728                     u2817:	
  4603  0728  0BF4               	decfsz	??_buzzer_control,f
  4604  0729  2F28               	goto	u2817
  4605  072A  0BF5               	decfsz	??_buzzer_control+1,f
  4606  072B  2F28               	goto	u2817
  4607  072C  2F2D               	nop2
  4608  072D  3001               	movlw	1
  4609  072E  1283               	bcf	3,5	;RP0=0, select bank0
  4610  072F  1303               	bcf	3,6	;RP1=0, select bank0
  4611  0730  07A3               	addwf	buzzer_control@i_192,f
  4612  0731  1803               	skipnc
  4613  0732  0AA4               	incf	buzzer_control@i_192+1,f
  4614  0733  3000               	movlw	0
  4615  0734  07A4               	addwf	buzzer_control@i_192+1,f
  4616  0735  2F0A               	goto	L7
  4617  0736                     __end_of_buzzer_control:	
  4618                           
  4619                           	psect	text20
  4620  0EE5                     __ptext20:	
  4621 ;; *************** function _ADC_Read *****************
  4622 ;; Defined at:
  4623 ;;		line 26 in file "supporing_cfile/adc.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  adcChannel      2    0[BANK0 ] int 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  2    0[BANK0 ] int 
  4630 ;; Registers used:
  4631 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4637 ;;      Params:         0       2       0       0       0
  4638 ;;      Locals:         0       0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0
  4640 ;;      Totals:         0       2       0       0       0
  4641 ;;Total ram usage:        2 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    4
  4644 ;; This function calls:
  4645 ;;		_delay_adc
  4646 ;; This function is called by:
  4647 ;;		_main
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           
  4652                           ;psect for function _ADC_Read
  4653  0EE5                     _ADC_Read:	
  4654                           
  4655                           ;adc.c: 28: ADCON0 = (1<<0) | (adcChannel<3);
  4656                           
  4657                           ;incstack = 0
  4658                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4659  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  4660  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  4661  0EE7  0821               	movf	ADC_Read@adcChannel+1,w
  4662  0EE8  3A80               	xorlw	128
  4663  0EE9  00FF               	movwf	127
  4664  0EEA  3080               	movlw	128
  4665  0EEB  027F               	subwf	127,w
  4666  0EEC  1D03               	skipz
  4667  0EED  2EF0               	goto	u2445
  4668  0EEE  3003               	movlw	3
  4669  0EEF  0220               	subwf	ADC_Read@adcChannel,w
  4670  0EF0                     u2445:	
  4671  0EF0  1803               	btfsc	3,0
  4672  0EF1  2EF4               	goto	u2440
  4673  0EF2  3001               	movlw	1
  4674  0EF3  2EF5               	goto	u2450
  4675  0EF4                     u2440:	
  4676  0EF4  3000               	movlw	0
  4677  0EF5                     u2450:	
  4678  0EF5  3801               	iorlw	1
  4679  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  4680  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  4681  0EF8  009F               	movwf	31	;volatile
  4682                           
  4683                           ;adc.c: 30: delay_adc(1000);
  4684  0EF9  30E8               	movlw	232
  4685  0EFA  00F4               	movwf	delay_adc@cnt
  4686  0EFB  3003               	movlw	3
  4687  0EFC  00F5               	movwf	delay_adc@cnt+1
  4688  0EFD  120A  118A  27F3  120A  158A  	fcall	_delay_adc
  4689                           
  4690                           ;adc.c: 32: GO=1;
  4691  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  4693  0F04  151F               	bsf	31,2	;volatile
  4694  0F05                     l284:	
  4695                           ;adc.c: 33: while(GO_DONE==1);
  4696                           
  4697  0F05  191F               	btfsc	31,2	;volatile
  4698  0F06  2F05               	goto	l284
  4699                           
  4700                           ;adc.c: 35: return((ADRESH<<8) + ADRESL);
  4701  0F07  081E               	movf	30,w	;volatile
  4702  0F08  00A1               	movwf	?_ADC_Read+1
  4703  0F09  1683               	bsf	3,5	;RP0=1, select bank1
  4704  0F0A  1303               	bcf	3,6	;RP1=0, select bank1
  4705  0F0B  081E               	movf	30,w	;volatile
  4706  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  4707  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  4708  0F0E  00A0               	movwf	?_ADC_Read
  4709  0F0F  0008               	return
  4710  0F10                     __end_of_ADC_Read:	
  4711                           
  4712                           	psect	text21
  4713  07F3                     __ptext21:	
  4714 ;; *************** function _delay_adc *****************
  4715 ;; Defined at:
  4716 ;;		line 15 in file "supporing_cfile/adc.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  cnt             2    4[COMMON] int 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;		None
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4730 ;;      Params:         2       0       0       0       0
  4731 ;;      Locals:         0       0       0       0       0
  4732 ;;      Temps:          0       0       0       0       0
  4733 ;;      Totals:         2       0       0       0       0
  4734 ;;Total ram usage:        2 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    3
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_ADC_Read
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _delay_adc
  4746  07F3                     _delay_adc:	
  4747  07F3                     l1536:	
  4748                           ;adc.c: 17: while(cnt--);
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _delay_adc: [wreg+status,2+status,0]
  4752                           
  4753  07F3  30FF               	movlw	255
  4754  07F4  07F4               	addwf	delay_adc@cnt,f
  4755  07F5  1803               	skipnc
  4756  07F6  0AF5               	incf	delay_adc@cnt+1,f
  4757  07F7  30FF               	movlw	255
  4758  07F8  07F5               	addwf	delay_adc@cnt+1,f
  4759  07F9  0A74               	incf	delay_adc@cnt,w
  4760  07FA  1D03               	skipz
  4761  07FB  2FF3               	goto	l1536
  4762  07FC  0A75               	incf	delay_adc@cnt+1,w
  4763  07FD  1903               	btfsc	3,2
  4764  07FE  0008               	return
  4765  07FF  2FF3               	goto	l1536
  4766  0800                     __end_of_delay_adc:	
  4767                           
  4768                           	psect	text22
  4769  0E50                     __ptext22:	
  4770 ;; *************** function _INTERRUPT_InterruptManager *****************
  4771 ;; Defined at:
  4772 ;;		line 324 in file "main.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;		None
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;		None
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      void 
  4779 ;; Registers used:
  4780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4786 ;;      Params:         0       0       0       0       0
  4787 ;;      Locals:         0       0       0       0       0
  4788 ;;      Temps:          4       0       0       0       0
  4789 ;;      Totals:         4       0       0       0       0
  4790 ;;Total ram usage:        4 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    2
  4793 ;; This function calls:
  4794 ;;		_TMR0_ISR
  4795 ;; This function is called by:
  4796 ;;		Interrupt level 1
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           
  4801                           ;psect for function _INTERRUPT_InterruptManager
  4802  0E50                     _INTERRUPT_InterruptManager:	
  4803                           
  4804                           ;main.c: 327: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4805  0E50  1A8B               	btfsc	11,5	;volatile
  4806  0E51  1D0B               	btfss	11,2	;volatile
  4807  0E52  2E58               	goto	i1l144
  4808                           
  4809                           ;main.c: 328: {
  4810                           ;main.c: 329: TMR0_ISR();
  4811  0E53  120A  158A  267A  120A  158A  	fcall	_TMR0_ISR
  4812  0E58                     i1l144:	
  4813  0E58  0873               	movf	??_INTERRUPT_InterruptManager+3,w
  4814  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  4815  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  4816  0E5B  00FF               	movwf	127
  4817  0E5C  0872               	movf	??_INTERRUPT_InterruptManager+2,w
  4818  0E5D  008A               	movwf	10
  4819  0E5E  0871               	movf	??_INTERRUPT_InterruptManager+1,w
  4820  0E5F  0084               	movwf	4
  4821  0E60  0E70               	swapf	??_INTERRUPT_InterruptManager^(0+-128),w
  4822  0E61  0083               	movwf	3
  4823  0E62  0EFE               	swapf	126,f
  4824  0E63  0E7E               	swapf	126,w
  4825  0E64  0009               	retfie
  4826  0E65                     __end_of_INTERRUPT_InterruptManager:	
  4827                           
  4828                           	psect	intentry
  4829  0004                     __pintentry:	
  4830                           ;incstack = 0
  4831                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4832                           
  4833  0004                     interrupt_function:	
  4834  007E                     saved_w	set	btemp
  4835  0004  00FE               	movwf	btemp
  4836  0005  0E03               	swapf	3,w
  4837  0006  00F0               	movwf	??_INTERRUPT_InterruptManager
  4838  0007  0804               	movf	4,w
  4839  0008  00F1               	movwf	??_INTERRUPT_InterruptManager+1
  4840  0009  080A               	movf	10,w
  4841  000A  00F2               	movwf	??_INTERRUPT_InterruptManager+2
  4842  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4843  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4844  000D  087F               	movf	btemp+1,w
  4845  000E  00F3               	movwf	??_INTERRUPT_InterruptManager+3
  4846  000F  120A  158A  2E50   	ljmp	_INTERRUPT_InterruptManager
  4847                           
  4848                           	psect	text23
  4849  0E7A                     __ptext23:	
  4850 ;; *************** function _TMR0_ISR *****************
  4851 ;; Defined at:
  4852 ;;		line 37 in file "supporing_cfile/tmr0.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4866 ;;      Params:         0       0       0       0       0
  4867 ;;      Locals:         0       0       0       0       0
  4868 ;;      Temps:          0       0       0       0       0
  4869 ;;      Totals:         0       0       0       0       0
  4870 ;;Total ram usage:        0 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    1
  4873 ;; This function calls:
  4874 ;;		_timer_isr
  4875 ;; This function is called by:
  4876 ;;		_INTERRUPT_InterruptManager
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _TMR0_ISR
  4882  0E7A                     _TMR0_ISR:	
  4883                           
  4884                           ;tmr0.c: 38: static volatile uint16_t CountCallBack = 0;
  4885                           ;tmr0.c: 40: INTCONbits.TMR0IE = 0;
  4886                           
  4887                           ;incstack = 0
  4888 ;; using string table level
  4889                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4890  0E7A  128B               	bcf	11,5	;volatile
  4891                           
  4892                           ;tmr0.c: 42: INTCONbits.TMR0IF = 0;
  4893  0E7B  110B               	bcf	11,2	;volatile
  4894                           
  4895                           ;tmr0.c: 46: TMR0 = (uint8_t)(tmr0_mask & (256-(((2 *200000000)/(256*4))/1000)));
  4896  0E7C  3001               	movlw	low (_tmr0_mask-__stringbase)
  4897  0E7D  0084               	movwf	4
  4898  0E7E  120A  158A  2000  120A  158A  	fcall	stringdir
  4899  0E83  397A               	andlw	122
  4900  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4901  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4902  0E86  0081               	movwf	1	;volatile
  4903                           
  4904                           ;tmr0.c: 49: if (++CountCallBack >= 1)
  4905  0E87  3001               	movlw	1
  4906  0E88  1683               	bsf	3,5	;RP0=1, select bank1
  4907  0E89  1303               	bcf	3,6	;RP1=0, select bank1
  4908  0E8A  07E0               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
  4909  0E8B  1803               	skipnc
  4910  0E8C  0AE1               	incf	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
  4911  0E8D  3000               	movlw	0
  4912  0E8E  07E1               	addwf	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
  4913  0E8F  0860               	movf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
  4914  0E90  0461               	iorwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
  4915  0E91  1903               	btfsc	3,2
  4916  0E92  2E9A               	goto	i1l1896
  4917                           
  4918                           ;tmr0.c: 50: {
  4919                           ;tmr0.c: 52: timer_isr();
  4920  0E93  120A  158A  25F2   	fcall	_timer_isr
  4921                           
  4922                           ;tmr0.c: 55: CountCallBack = 0;
  4923  0E96  1683               	bsf	3,5	;RP0=1, select bank1
  4924  0E97  1303               	bcf	3,6	;RP1=0, select bank1
  4925  0E98  01E0               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
  4926  0E99  01E1               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
  4927  0E9A                     i1l1896:	
  4928                           
  4929                           ;tmr0.c: 56: }
  4930                           ;tmr0.c: 59: INTCONbits.TMR0IE = 1;
  4931  0E9A  168B               	bsf	11,5	;volatile
  4932  0E9B  0008               	return
  4933  0E9C                     __end_of_TMR0_ISR:	
  4934                           
  4935                           	psect	text24
  4936  0DF2                     __ptext24:	
  4937 ;; *************** function _timer_isr *****************
  4938 ;; Defined at:
  4939 ;;		line 320 in file "main.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4953 ;;      Params:         0       0       0       0       0
  4954 ;;      Locals:         0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0
  4956 ;;      Totals:         0       0       0       0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_TMR0_ISR
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _timer_isr
  4968  0DF2                     _timer_isr:	
  4969                           
  4970                           ;main.c: 321: main_state = 1;
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in _timer_isr: [wreg]
  4974  0DF2  3001               	movlw	1
  4975  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
  4976  0DF4  1303               	bcf	3,6	;RP1=0, select bank1
  4977  0DF5  00E8               	movwf	_main_state^(0+128)
  4978  0DF6  3000               	movlw	0
  4979  0DF7  00E9               	movwf	(_main_state^(0+128)+1)
  4980  0DF8  0008               	return
  4981  0DF9                     __end_of_timer_isr:	
  4982  007E                     btemp	set	126	;btemp
  4983  007E                     wtemp0	set	126


Data Sizes:
    Strings     66
    Constant    1
    Data        11
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     64      80
    BANK1            80      0      76
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_puts@str	PTR unsigned char  size(1) Largest target is 11
		 -> STR_10(CODE[11]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[10]), 
		 -> STR_6(CODE[11]), STR_5(CODE[9]), STR_4(CODE[8]), STR_3(CODE[6]), 
		 -> STR_2(CODE[6]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_buzzer_control
    _main->_rgb_led_control
    _lcd_init->_delay
    _lcd_init_write->_delay
    _lcd_print_number->___lwmod
    _lcd_com->_delay
    _calculate_heart_beat->___aldiv
    _calculate_heart_beat->___awdiv
    _calculate_heart_beat->___lwdiv
    ___wmul->___awdiv
    _ADC_Read->_delay_adc

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calculate_heart_beat
    _system_init->_lcd_puts
    _lcd_puts->_lcd_data
    _lcd_init->_lcd_com
    _lcd_init_write->_delay
    _lcd_print_number->___lwdiv
    _lcd_print_number->_lcd_data
    _lcd_data->_lcd_com
    _lcd_com->_delay
    _calculate_heart_beat->___aldiv
    _calculate_heart_beat->___wmul
    ___wmul->___awdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0   16683
                                             28 BANK0     36    36      0
                           _ADC_Read
                            ___awdiv
                     _buzzer_control
               _calculate_heart_beat
                            _lcd_com
                   _lcd_print_number
                           _lcd_puts
                    _rgb_led_control
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          3     3      0    6130
                                             10 BANK0      3     3      0
                           _ADC_Init
                    _TMR0_Initialize
                    _TMR0_StartTimer
                            _lcd_com
                           _lcd_init
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     3      0    1643
                                              7 BANK0      3     3      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0    3305
                              _delay
                            _lcd_com
                     _lcd_init_write
 ---------------------------------------------------------------------------------
 (3) _lcd_init_write                                       1     1      0    1077
                                              2 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rgb_led_control                                      2     0      2     172
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _lcd_print_number                                     8     6      2    2667
                                              7 BANK0      8     6      2
                            ___lwdiv
                            ___lwmod
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             1     1      0    1213
                                              6 BANK0      1     1      0
                            _lcd_com
 ---------------------------------------------------------------------------------
 (4) _lcd_com                                              4     4      0    1182
                                              2 BANK0      4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                4     2      2    1046
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _calculate_heart_beat                                14    12      2    2863
                                             14 BANK0     14    12      2
                            ___aldiv
                            ___awdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     304
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     501
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1095
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _buzzer_control                                       7     7      0     114
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             2     0      2     171
                                              0 BANK0      2     0      2
                          _delay_adc
 ---------------------------------------------------------------------------------
 (2) _delay_adc                                            2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                          _timer_isr
 ---------------------------------------------------------------------------------
 (8) _timer_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
     _delay_adc
   ___awdiv
   _buzzer_control
   _calculate_heart_beat
     ___aldiv
     ___awdiv
     ___lwdiv
     ___wmul
       ___awdiv (ARG)
   _lcd_com
     _delay
   _lcd_print_number
     ___lwdiv
     ___lwmod
     _lcd_data
       _lcd_com
         _delay
   _lcd_puts
     _lcd_data
       _lcd_com
         _delay
   _rgb_led_control
   _system_init
     _ADC_Init
     _TMR0_Initialize
     _TMR0_StartTimer
     _lcd_com
       _delay
     _lcd_init
       _delay
       _lcd_com
         _delay
       _lcd_init_write
         _delay
     _lcd_puts
       _lcd_data
         _lcd_com
           _delay

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _timer_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4C       7       95.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     40      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A6      12        0.0%
ABS                  0      0      A6       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 28 22:40:59 2024

                    ?_buzzer_control 0070                                    _P 00EA  
                                  _T 006D                                    _c 0076  
                                  pc 0002            calculate_heart_beat@i_188 003A  
                        __CFG_CP$OFF 0000                          lcd_com@temp 0025  
                                 l71 00BD                                   l74 0232  
                                 _GO 00FA                                   l98 0F3D  
                                 _QS 0077                         ___awdiv@sign 0025  
                                 fsr 0004                  ___wmul@multiplicand 002A  
                __end_of_system_init 06D2                                  l206 0E6B  
                                l215 0FBC                                  l216 0FBD  
                                l451 05E5                                  l284 0F05  
                                l396 0EA8                                  _IBI 0069  
                                _BPM 0066                                  _RB3 0033  
                       __CFG_CPD$OFF 0000                                  _amp 00E6  
                                _num 00A0                                  fsr0 0004  
                                indf 0000                         __CFG_FOSC$HS 0000  
                       __CFG_LVP$OFF 0000                          main@avg_ibi 0040  
                        main@avg_bpm 005E                                 l2222 07EE  
                               l2214 07DB                                 l2206 07B7  
                               l2310 0179                                 l2208 07C5  
                               l2218 07E6                                 l2330 01B1  
                               l2244 0FA5                                 l2236 0F81  
                               l1540 0EA0                                 l2324 01A2  
                               l2316 0197                                 l2260 0F4B  
                               l2500 03F5                                 l2190 07A4  
                               l2238 0F8F                                 l2262 0F59  
                               l2270 0F72                                 l1536 07F3  
                               l2248 0FB0                                 l2336 01EA  
                               l2424 073A                                 l1800 0F21  
                               l2520 047A                                 l1570 0606  
                               l1562 05F6                                 l2354 0290  
                               l2290 00E9                                 l2266 0F67  
                               l2426 0772                                 l2178 0EC4  
                               l2450 0307                                 l1580 063E  
                               l1572 0616                                 l2196 07AF  
                               l2524 0489                                 l2460 033F  
                               l2542 04D8                                 l1584 064B  
                               l2536 04C0                                 l2456 0329  
                               l2554 051A                                 l2538 04C2  
                               l2562 0531                                 l1588 0659  
                               l2556 051C                                 l2494 03C1  
                               l2558 052D                                 l1784 0706  
                               l2658 0538                                 STR_1 0807  
                               STR_2 082C                                 STR_3 0843  
                               STR_4 083B                                 STR_5 0832  
                               STR_6 0812                                 STR_7 0828  
                               STR_8 082C                                 STR_9 0843  
                               u1105 0EB0                                 u2015 0FDE  
                               u2105 07DC                                 u1155 060A  
                               u1175 0618                                 u1095 0EA9  
                               u2215 0F4E                                 u1185 062D  
                               u2065 07BA                                 u2145 0F84  
                               u2305 00DB                                 u1195 063F  
                               u2315 00F4                                 u2235 0F5F  
                               u2500 02E2                                 u2085 07C6  
                               u2165 0F90                                 u2405 01E8  
                               u2325 0102                                 u2245 0F68  
                               u2510 02F7                                 u2095 07D2  
                               u2175 0F9C                                 u2415 023E  
                               u2440 0EF4                                 u2185 0FA6  
                               u2345 0131                                 u2265 007B  
                               u1705 0F35                                 u2450 0EF5  
                               u2435 029B                                 u2275 00A7  
                               u2445 0EF0                                 u1645 06E3  
                               u2365 0177                                 u2285 00B5  
                               u2605 04BE                                 u2525 0325  
                               u2375 0195                                 u2295 00C9  
                               u2615 050B                                 u1665 0713  
                               u2625 0518                                 u2545 03AC  
                               u2395 01AF                                 u2555 03BF  
                               u2707 0368                                 u1685 0F19  
                               u2565 03F3                                 u2717 037B  
                               u2807 071C                                 u1695 0F2A  
                               u2575 0476                                 u2727 044D  
                               u2817 0728                                 u2585 0485  
                               u2737 0460                                 u2747 0670  
                               u2595 04B1                                 u2757 0681  
                               u2767 069A                                 u2777 06AD  
                               u2697 034F                                 u2787 06EC  
                               u1995 0E71                                 u2797 06F8  
                               _TMR0 0001                         __CFG_WRT$OFF 0000  
                               _main 02CD                                 _rate 00B4  
                    _TMR0_StartTimer 0DEC                                 btemp 007E  
                               _tune 00E2                     __end_of_ADC_Init 0E08  
                   __end_of_ADC_Read 0F10                          lcd_puts@str 0029  
                      __CFG_BOREN$ON 0000                                 start 0012  
            __end_of_TMR0_Initialize 0E3D                      __end_of___aldiv 0662  
                              ?_main 0070                      __end_of___awdiv 07F3  
                              STR_10 081D                        __CFG_WDTE$OFF 0000  
              calculate_heart_beat@N 0038                      ___awdiv@divisor 0020  
              calculate_heart_beat@i 0036                      __end_of___lwdiv 0FB5  
                              i1l144 0E58                      __end_of___lwmod 0F77  
                    ___awdiv@counter 0024                                _RCREG 001A  
                              _RCSTA 0018                                _SPBRG 0099  
                              _PORTB 0006                                _TRISB 0086  
                              _TRISC 0087                                _TXREG 0019  
                              _TXSTA 0098                      __end_of_lcd_com 1000  
                   __end_of_TMR0_ISR 0E9C                                _Pulse 0068  
                              _delay 0E65                                main@i 005C  
                     __pbitbssCOMMON 03C8                                pclath 000A  
                  main@reading_count 005A                                status 0003  
                              wtemp0 007E                      __initialization 0015  
                        _system_init 0662                         __end_of_main 0544  
        ?_INTERRUPT_InterruptManager 0070                               ??_main 003C  
                             ?_delay 0074              __end_of_TMR0_StartTimer 0DEE  
                             _ADCON0 001F                               _ADCON1 009F  
                             _ADRESH 001E                               _ADRESL 009E  
                   ___awdiv@dividend 0022                               i1l1896 0E9A  
                     __CFG_PWRTE$OFF 0000                               _Signal 0064  
                   __end_of_lcd_data 0E1A                     __end_of_lcd_init 05D3  
                   __end_of_lcd_puts 0EE5                            ??___aldiv 0074  
                             ___wmul 0E9C                            ??___awdiv 0074  
                          ??___lwdiv 0074                            ??___lwmod 0074  
                   ?_TMR0_Initialize 0070                               delay@i 0020  
                             delay@j 0074                     ___awdiv@quotient 0026  
                             _thresh 006B                               _status 03C8  
                          ??_lcd_com 0022                            ?_ADC_Init 0070  
                          ?_ADC_Read 0020                               saved_w 007E  
                   ??_lcd_init_write 0076                        main@total_ibi 0058  
                      main@total_bpm 0056                buzzer_control@is_high 0020  
            __end_of__initialization 0042                    ?_lcd_print_number 0027  
                   main@ibi_readings 004C                     ??_buzzer_control 0074  
                 ??_lcd_print_number 0029                       __pcstackCOMMON 0070  
      __size_of_calculate_heart_beat 0287             __size_of_rgb_led_control 0033  
                       __pidataBANK0 0DF9                         __pidataBANK1 0DEE  
                          ?_TMR0_ISR 0070                        __end_of_delay 0E7A  
                 __size_of_delay_adc 000D                   rgb_led_control@bpm 0074  
                   main@bpm_readings 0042                       _OPTION_REGbits 0081  
              TMR0_ISR@CountCallBack 00E0                           ??_ADC_Init 0074  
                         ??_ADC_Read 0076                              ??_delay 0076  
                   ?_TMR0_StartTimer 0070                    lcd_print_number@i 0027  
                  lcd_print_number@k 002B                    lcd_print_number@p 002D  
                         __pbssBANK0 0060                           __pbssBANK1 00A0  
                         __pmaintext 02CD                              ?___wmul 0028  
                         ??_TMR0_ISR 0070                           __pintentry 0004  
                 __size_of_timer_isr 0007                              _GO_DONE 00FA  
                          ?_lcd_data 0070                            ?_lcd_init 0070  
                          ?_lcd_puts 0070                           __stringtab 0800  
                  __end_of_delay_adc 0800                           _main_state 00E8  
                       ?_system_init 0070                              ___aldiv 05D3  
                            ___awdiv 0798                      __size_of___wmul 0023  
                            ___lwdiv 0F77                              ___lwmod 0F43  
                            __ptext1 0662                              __ptext2 0EBF  
                            __ptext3 0544                              __ptext4 0E3D  
                            __ptext5 0DEC                              __ptext6 0E2B  
                            __ptext7 0E00                              __ptext8 0F10  
                            __ptext9 0736                              _lcd_com 0FB5  
                  ??_rgb_led_control 0076                     ___aldiv@dividend 0024  
                         ??_lcd_data 0076                              clrloop0 0E09  
                         ??_lcd_init 0076                           _secondBeat 0078  
                         ??_lcd_puts 0076                 end_of_initialization 0042  
                  __end_of_tmr0_mask 0807                    __end_of_timer_isr 0DF9  
                          _RCSTAbits 0018                     ___aldiv@quotient 002A  
                          _PORTBbits 0006                            _PORTCbits 0007  
      calculate_heart_beat@adc_value 002E                            _TRISBbits 0086  
                          _TRISCbits 0087                    __size_of_ADC_Init 0008  
                  __size_of_ADC_Read 002B                      lcd_init_write@a 0022  
                     __end_of___wmul 0EBF            __size_of_lcd_print_number 0062  
                       _lastBeatTime 00DC                    __size_of_TMR0_ISR 0022  
                buzzer_control@i_192 0023                  start_initialization 0015  
       __end_of_calculate_heart_beat 02CD             __size_of_TMR0_Initialize 0012  
                      _sampleCounter 0060                      buzzer_control@i 0021  
                           ??___wmul 0075                           init_fetch0 0E1A  
                        __pdataBANK0 0069                          __pdataBANK1 00E8  
               __size_of_system_init 0070                   ADC_Read@adcChannel 0020  
                        __pbssCOMMON 0076                            ___latbits 0002  
                      __pcstackBANK0 0020                            _adc_value 00E4  
                  __size_of_lcd_data 000A                    __size_of_lcd_init 008F  
                  __size_of_lcd_puts 0026             __size_of_TMR0_StartTimer 0002  
                          _delay_adc 07F3                     ___lwdiv@dividend 0022  
            __size_of_lcd_init_write 0013                      _rgb_led_control 0F10  
                           ?___aldiv 0020                             ?___awdiv 0020  
                           ?___lwdiv 0020                             ?___lwmod 0020  
            __size_of_buzzer_control 0064         ??_INTERRUPT_InterruptManager 0070  
                          __pstrings 0800                             ?_lcd_com 0070  
                          _firstBeat 006F                             _ADC_Init 0E00  
                           _ADC_Read 0EE5                     ___lwdiv@quotient 0025  
                     __size_of_delay 0015                      ___aldiv@divisor 0020  
                  ??_TMR0_Initialize 0074                    interrupt_function 0004  
                    ___aldiv@counter 0028                       ___wmul@product 002C  
                          clear_ram0 0E08                            _tmr0_mask 0806  
                         ?_delay_adc 0074  __size_of_INTERRUPT_InterruptManager 0015  
                           _PIR1bits 000C                 _calculate_heart_beat 0046  
                          main@F1473 00D2                            main@F1475 00C8  
                           _TMR0_ISR 0E7A                            _timer_isr 0DF2  
                   _lcd_print_number 0736                            lcd_data@a 0026  
                        __stringbase 0805                    ___wmul@multiplier 0028  
                       delay_adc@cnt 0074                            lcd_puts@i 0027  
            __end_of_rgb_led_control 0F43                ?_calculate_heart_beat 002E  
                         ?_timer_isr 0070                    ??_TMR0_StartTimer 0074  
                   __size_of___aldiv 008F                     __size_of___awdiv 005B  
                   __size_of___lwdiv 003E                     __size_of___lwmod 0034  
                 __end_of__stringtab 0806                     __size_of_lcd_com 004B  
                    ___lwdiv@divisor 0020                      ___lwdiv@counter 0024  
                           __ptext10 0E10                             __ptext11 0FB5  
                           __ptext20 0EE5                             __ptext12 0E65  
                           __ptext21 07F3                             __ptext13 0F43  
                           __ptext22 0E50                             __ptext14 0046  
                           __ptext23 0E7A                             __ptext15 0E9C  
                           __ptext24 0DF2                             __ptext16 0F77  
                           __ptext17 0798                             __ptext18 05D3  
                           __ptext19 06D2                             _lcd_data 0E10  
                           _lcd_init 0544                             _lcd_puts 0EBF  
                      __size_of_main 0277                       _lcd_init_write 0E3D  
                        ??_delay_adc 0076                             lcd_com@a 0024  
 __end_of_INTERRUPT_InterruptManager 0E65           _INTERRUPT_InterruptManager 0E50  
                     _buzzer_control 06D2                           _INTCONbits 000B  
                           init_ram0 0E1E                             intlevel1 0000  
                   ?_rgb_led_control 0074                     ___lwmod@dividend 0022  
             __end_of_lcd_init_write 0E50               ??_calculate_heart_beat 0030  
                          stringcode 0800                        ??_system_init 002A  
             __end_of_buzzer_control 0736                          ??_timer_isr 0070  
   calculate_heart_beat@runningTotal 0034                      ___lwmod@divisor 0020  
                    _TMR0_Initialize 0E2B                      ___lwmod@counter 0075  
                           stringdir 0800                             stringtab 0800  
                       ___aldiv@sign 0029             __end_of_lcd_print_number 0798  
                    ?_lcd_init_write 0070  
